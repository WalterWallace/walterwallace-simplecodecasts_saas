{"_id":"mpns","_rev":"35-a0a81704c4a23f12479b773c9c07d0c4","name":"mpns","description":"A Node.js interface to the Microsoft Push Notification Service (MPNS) for Windows Phone.","dist-tags":{"latest":"2.1.0"},"versions":{"1.0.0":{"name":"mpns","description":"A Node.js interface to the Microsoft Push Notification Service (MPNS) for Windows Phone.","version":"1.0.0","author":{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},"contributors":[{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"}],"keywords":["mpns","notifications","wp","windows phone","microsoft","push","push notifications"],"repository":{"type":"git","url":"git://github.com/jeffwilcox/mpns.git"},"main":"./lib/mpns.js","engines":{"node":">= 0.5.0 < 0.7.0"},"_npmUser":{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"},"_id":"mpns@1.0.0","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-alpha-6","_nodeVersion":"v0.6.5","_defaultsLoaded":true,"dist":{"shasum":"f80692ab3cd8454d31e7043f3e9346be1749e4ba","tarball":"http://registry.npmjs.org/mpns/-/mpns-1.0.0.tgz"},"maintainers":[{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"}],"directories":{}},"1.0.1":{"name":"mpns","description":"A Node.js interface to the Microsoft Push Notification Service (MPNS) for Windows Phone.","version":"1.0.1","author":{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},"contributors":[{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"}],"keywords":["mpns","notifications","wp","windows phone","microsoft","push","push notifications"],"repository":{"type":"git","url":"git://github.com/jeffwilcox/mpns.git"},"main":"./lib/mpns.js","engines":{"node":">= 0.5.0 < 0.7.0"},"_npmUser":{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"},"_id":"mpns@1.0.1","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.12","_nodeVersion":"v0.6.16","_defaultsLoaded":true,"dist":{"shasum":"ee3f1db42078c7e4ec9f4485f7b5521a1a4455d1","tarball":"http://registry.npmjs.org/mpns/-/mpns-1.0.1.tgz"},"maintainers":[{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"}],"directories":{}},"1.0.2":{"name":"mpns","description":"A Node.js interface to the Microsoft Push Notification Service (MPNS) for Windows Phone.","version":"1.0.2","author":{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},"contributors":[{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"}],"keywords":["mpns","notifications","wp","windows phone","microsoft","push","push notifications"],"repository":{"type":"git","url":"git://github.com/jeffwilcox/mpns.git"},"main":"./lib/mpns.js","engines":{"node":">= 0.5.0 < 0.7.0"},"_npmUser":{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"},"_id":"mpns@1.0.2","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.12","_nodeVersion":"v0.6.16","_defaultsLoaded":true,"dist":{"shasum":"e52e979815c3470c462beab333dc6badd719fd55","tarball":"http://registry.npmjs.org/mpns/-/mpns-1.0.2.tgz"},"maintainers":[{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"}],"directories":{}},"1.0.4":{"name":"mpns","description":"A Node.js interface to the Microsoft Push Notification Service (MPNS) for Windows Phone.","version":"1.0.4","author":{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},"contributors":[{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"}],"keywords":["mpns","notifications","wp","windows phone","microsoft","push","push notifications"],"repository":{"type":"git","url":"git://github.com/jeffwilcox/mpns.git"},"main":"./lib/mpns.js","engines":{"node":">= 0.5.0 <= 0.9.0"},"_npmUser":{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"},"_id":"mpns@1.0.4","dependencies":{},"devDependencies":{},"optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.12","_nodeVersion":"v0.6.16","_defaultsLoaded":true,"dist":{"shasum":"6a2934cc989b03e753463b30a74e1b9de7592a75","tarball":"http://registry.npmjs.org/mpns/-/mpns-1.0.4.tgz"},"maintainers":[{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"}],"directories":{}},"1.1.0":{"name":"mpns","description":"A Node.js interface to the Microsoft Push Notification Service (MPNS) for Windows Phone.","version":"1.1.0","author":{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},"contributors":[{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"}],"keywords":["mpns","notifications","wp","windows phone","microsoft","push","push notifications"],"repository":{"type":"git","url":"git://github.com/jeffwilcox/mpns.git"},"main":"./lib/mpns.js","engines":{"node":">= 0.5.0 <= 0.9.0"},"readme":"#mpns\r\n\r\nSend toast and live tile updates to Windows Phones through the Microsoft Push Notification Service (MPNS). Intended for the cloud and Node.js.\r\n\r\n## Installation\r\n\r\nVia [npm][]:\r\n\r\n\t$ npm install mpns\r\n\t\r\nAs a submodule of your Git project\r\n\r\n\t$ git submodule add http://github.com/jeffwilcox/mpns.git mpns\r\n\t$ git submodule update --init\r\n\r\n## Usage\r\n### Load in the module\r\n\r\n```javascript\r\nvar mpns = require('mpns');\r\n```\r\n\r\n### Sending a toast\r\nTo send a toast, simply call the `sendToast` method on mpns.\r\n\r\n```javascript\r\nvar mpns = require('mpns');\r\nmpns.sendToast(pushUri, 'Bold Text', 'This is normal text');\r\n\r\n// Optional callback\r\nmpns.sendToast(pushUri, text1, text2, callback);\r\n```\r\n\r\nEach of the methods that send tile and toast notifications have two alternative parameter signatures:\r\n\r\n```\r\nsend*(pushUri, [options], [callback]) \r\nsend*(pushUri, string1, string2, ..., [callback])\r\n```\r\n\r\nThe ordering of the parameters in the non-object calling method assumes ordering as documented in the toast or tile-specific sections below.\r\n\r\nFor toasts, the properties and ordering for them:\r\n\r\n* `text1` the text of the toast, this first text will appear bold on the phone\r\n* `text2` additional toast text, will appear in the normal font. It does not wrap.\r\n* `param` optional URI parameter within your application specifying the XAML page to open within the app, along with any query string parameters for the page's context\r\n\r\n### Sending a live tile update\r\nTo send a tile update, call the `sendTile` method on mpns.\r\n\r\nIt is recommended that you use the options syntax for this call as it is possible for the live tile update to include just one component in the update, say the tile count, and not update other properties.\r\n\r\nThe option names or ordering for parameters is:\r\n\r\n* `backgroundImage` URI to the background image for the tile. Beware that the URI may be restricted to the whitelisted domain names that you provided in your application.\r\n* `count` the number to appear in the tile\r\n* `title` the title of the tile\r\n* `backBackgroundImage` URI to the image to be on the flip side of the tile\r\n* `backTitle` optional title for the back tile\r\n* `backContent` optional content for the back tile (appears in a larger font size)\r\n\r\n### Create a new notification object\r\nYou can create a new notification object (either of type live tile or toast). This is the original style for this module but it is now recommended that you use the shorter `send*` syntax on the mpns object itself. This aligns with the WNS module for Windows in its simplicity.\r\n\r\nProperty names for the notification object directly correlate to the names used in the MPNS XML payload as documented on MSDN. Properties can either be set directly on the object (such as toast.text1) or by passing the values in as options to the constructor.\r\n\r\n```javascript\r\noptions = { text1: 'Hello!', text2: 'Great to see you today.' };\r\nvar toast = new mpns.toast(options);\r\n```\r\n\r\n### Sending a raw notification\r\nWhen creating the notification object, either provide the raw payload first, or as the `options.payload` property.\r\n\r\n```javascript\r\nvar raw = new mpns.rawNotification('My Raw Payload', options);\r\n```\r\n\r\nToday the type on the request is set to UTF8 explicitly.\r\n\r\n### Results object information\r\nA results object is passed back through the callback and has important information from MPNS.\r\n\r\n- `deviceConnectionStatus`: The device status as reported by the service.\r\n- `notificationStatus`: The status of your provided notification.\r\n- `subscriptionStatus`: The status of the subscription URI.\r\n\r\nThe object will also contain all the key fields for your toast or live tile update, plus the pushType. This makes it easy to store this information in a history log somewhere in the ether.\r\n\r\n### Handling Errors\r\nIt is very important as a consumer that you store appropriate actionable data about failed push notification attempts. As a result, the callback's first parameter (err) is set to the standard results object as well as a few additional fields depending on the returned status code from the server.\r\n\r\nRemember to take action on that information in order to be a good MPNS citizen. These values may be set in the error object and of interest to you:\r\n\r\n- `minutesToDelay`: If this is present, it is the suggested minimum amount of time that you should wait until making another request to the same subscription URI. For HTTP 412s, for example, the minimum time is one hour and so the returned value defaults to 61.\r\n- `shouldDeleteChannel`: If this is set to `true`, the channel is gone according to MPNS. Delete it from your channel/subscription database and never look back.\r\n- `error`: If an error is captured while trying to make the HTTP request, this will be set to that error callback instance.\r\n\r\n### A note about Windows Phone 7.5\r\nThis module permits sending toasts and tiles specific to Mango. If you include the `param` field when sending a push to a 7.0 (first Windows Phone release) phone, unfortunately it may not be received, or will error out the subscription.\r\n\r\nTake care when registering your subscription channels with your cloud service to include the application platform version of the app (7.1 for Mango apps). To rock, maybe also grab the OS version and deployed app version. That information can be helpful when supporting customers.\r\n\r\n## Credits\r\n\r\nNPM module written and maintained by [Jeff Wilcox] with contributions from:\r\n\r\n- Jeff Wilcox : https://github.com/jeffwilcox\r\n- Shawn Burke : https://github.com/shawnburke\r\n- Jeremie Pelletier : https://github.com/ddude\r\n\r\n## License\r\n\r\nCopyright Jeff Wilcox\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n[Jeff Wilcox]: http://www.jeff.wilcox.name\r\n[npm]: http://github.com/isaacs/npm\r\n\r\n## Changelog\r\n\r\n1.1.0:\r\n\r\n* Adds `sendText` and `sendTile` methods more consistent with the WNS module, removing the need to create a new object, only to then call send on it with a push URI.\r\n\r\n1.0.4:\r\n\r\n* Adds support for Node.js through 0.9.0\r\n\r\n1.0.3:\r\n\r\n* Addresses issues when using numbers to set the tile data\r\n* Cleans up string encoding functions.\r\n\r\n1.0.2:\r\n\r\n* Fixes some small formatting issues.\r\n\r\n1.0.1:\r\n\r\n* Adds raw notification type support.\r\n\r\n1.0.0:\r\n\r\n* Initial implementation offering basic live tile and toast (no raw) support.\r\n","_id":"mpns@1.1.0","dist":{"shasum":"d634691747e26e4399f008d6bbacbf1687a9ec52","tarball":"http://registry.npmjs.org/mpns/-/mpns-1.1.0.tgz"},"maintainers":[{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"}],"directories":{}},"1.1.1":{"name":"mpns","description":"A Node.js interface to the Microsoft Push Notification Service (MPNS) for Windows Phone.","version":"1.1.1","author":{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},"contributors":[{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"}],"keywords":["mpns","notifications","wp","windows phone","microsoft","push","push notifications"],"repository":{"type":"git","url":"git://github.com/jeffwilcox/mpns.git"},"main":"./lib/mpns.js","engines":{"node":">= 0.5.0 <= 0.9.0"},"readme":"#mpns\r\n\r\nSend toast and live tile updates to Windows Phones through the Microsoft Push Notification Service (MPNS). Intended for the cloud and Node.js.\r\n\r\n## Installation\r\n\r\nVia [npm][]:\r\n\r\n\t$ npm install mpns\r\n\t\r\nAs a submodule of your Git project\r\n\r\n\t$ git submodule add http://github.com/jeffwilcox/mpns.git mpns\r\n\t$ git submodule update --init\r\n\r\n## Usage\r\n### Load in the module\r\n\r\n```javascript\r\nvar mpns = require('mpns');\r\n```\r\n\r\n### Sending a toast\r\nTo send a toast, simply call the `sendToast` method on mpns.\r\n\r\n```javascript\r\nvar mpns = require('mpns');\r\nmpns.sendToast(pushUri, 'Bold Text', 'This is normal text');\r\n\r\n// Optional callback\r\nmpns.sendToast(pushUri, text1, text2, callback);\r\n```\r\n\r\nEach of the methods that send tile and toast notifications have two alternative parameter signatures:\r\n\r\n```\r\nsend*(pushUri, [options], [callback]) \r\nsend*(pushUri, string1, string2, ..., [callback])\r\n```\r\n\r\nThe ordering of the parameters in the non-object calling method assumes ordering as documented in the toast or tile-specific sections below.\r\n\r\nFor toasts, the properties and ordering for them:\r\n\r\n* `text1` the text of the toast, this first text will appear bold on the phone\r\n* `text2` additional toast text, will appear in the normal font. It does not wrap.\r\n* `param` optional URI parameter within your application specifying the XAML page to open within the app, along with any query string parameters for the page's context\r\n\r\n### Sending a live tile update\r\nTo send a tile update, call the `sendTile` method on mpns.\r\n\r\nIt is recommended that you use the options syntax for this call as it is possible for the live tile update to include just one component in the update, say the tile count, and not update other properties.\r\n\r\nThe option names or ordering for parameters is:\r\n\r\n* `backgroundImage` URI to the background image for the tile. Beware that the URI may be restricted to the whitelisted domain names that you provided in your application.\r\n* `count` the number to appear in the tile\r\n* `title` the title of the tile\r\n* `backBackgroundImage` URI to the image to be on the flip side of the tile\r\n* `backTitle` optional title for the back tile\r\n* `backContent` optional content for the back tile (appears in a larger font size)\r\n\r\n### Create a new notification object\r\nYou can create a new notification object (either of type live tile or toast). This is the original style for this module but it is now recommended that you use the shorter `send*` syntax on the mpns object itself. This aligns with the WNS module for Windows in its simplicity.\r\n\r\nProperty names for the notification object directly correlate to the names used in the MPNS XML payload as documented on MSDN. Properties can either be set directly on the object (such as toast.text1) or by passing the values in as options to the constructor.\r\n\r\n```javascript\r\noptions = { text1: 'Hello!', text2: 'Great to see you today.' };\r\nvar toast = new mpns.toast(options);\r\n```\r\n\r\n### Sending a raw notification\r\nWhen creating the notification object, either provide the raw payload first, or as the `options.payload` property.\r\n\r\n```javascript\r\nvar raw = new mpns.rawNotification('My Raw Payload', options);\r\n```\r\n\r\nToday the type on the request is set to UTF8 explicitly.\r\n\r\n### Results object information\r\nA results object is passed back through the callback and has important information from MPNS.\r\n\r\n- `deviceConnectionStatus`: The device status as reported by the service.\r\n- `notificationStatus`: The status of your provided notification.\r\n- `subscriptionStatus`: The status of the subscription URI.\r\n\r\nThe object will also contain all the key fields for your toast or live tile update, plus the pushType. This makes it easy to store this information in a history log somewhere in the ether.\r\n\r\n### Handling Errors\r\nIt is very important as a consumer that you store appropriate actionable data about failed push notification attempts. As a result, the callback's first parameter (err) is set to the standard results object as well as a few additional fields depending on the returned status code from the server.\r\n\r\nRemember to take action on that information in order to be a good MPNS citizen. These values may be set in the error object and of interest to you:\r\n\r\n- `minutesToDelay`: If this is present, it is the suggested minimum amount of time that you should wait until making another request to the same subscription URI. For HTTP 412s, for example, the minimum time is one hour and so the returned value defaults to 61.\r\n- `shouldDeleteChannel`: If this is set to `true`, the channel is gone according to MPNS. Delete it from your channel/subscription database and never look back.\r\n- `error`: If an error is captured while trying to make the HTTP request, this will be set to that error callback instance.\r\n\r\n### A note about Windows Phone 7.5\r\nThis module permits sending toasts and tiles specific to Mango. If you include the `param` field when sending a push to a 7.0 (first Windows Phone release) phone, unfortunately it may not be received, or will error out the subscription.\r\n\r\nTake care when registering your subscription channels with your cloud service to include the application platform version of the app (7.1 for Mango apps). To rock, maybe also grab the OS version and deployed app version. That information can be helpful when supporting customers.\r\n\r\n## Credits\r\n\r\nNPM module written and maintained by [Jeff Wilcox] with contributions from:\r\n\r\n- Jeff Wilcox : https://github.com/jeffwilcox\r\n- Shawn Burke : https://github.com/shawnburke\r\n- Jeremie Pelletier : https://github.com/ddude\r\n\r\n## License\r\n\r\nCopyright Jeff Wilcox\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n[Jeff Wilcox]: http://www.jeff.wilcox.name\r\n[npm]: http://github.com/isaacs/npm\r\n\r\n## Changelog\r\n\r\n1.1.1:\r\n\r\n* Adds parameter validation that will throw, for robustness.\r\n\r\n1.1.0:\r\n\r\n* Adds `sendText` and `sendTile` methods more consistent with the WNS module, removing the need to create a new object, only to then call send on it with a push URI.\r\n\r\n1.0.4:\r\n\r\n* Adds support for Node.js through 0.9.0\r\n\r\n1.0.3:\r\n\r\n* Addresses issues when using numbers to set the tile data\r\n* Cleans up string encoding functions.\r\n\r\n1.0.2:\r\n\r\n* Fixes some small formatting issues.\r\n\r\n1.0.1:\r\n\r\n* Adds raw notification type support.\r\n\r\n1.0.0:\r\n\r\n* Initial implementation offering basic live tile and toast (no raw) support.\r\n","_id":"mpns@1.1.1","dist":{"shasum":"72224a5124fc285b726877181191f672e8d55122","tarball":"http://registry.npmjs.org/mpns/-/mpns-1.1.1.tgz"},"maintainers":[{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"}],"directories":{}},"1.1.2":{"name":"mpns","description":"A Node.js interface to the Microsoft Push Notification Service (MPNS) for Windows Phone.","version":"1.1.2","author":{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},"contributors":[{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"}],"keywords":["mpns","notifications","wp","windows phone","microsoft","push","push notifications"],"repository":{"type":"git","url":"git://github.com/jeffwilcox/mpns.git"},"main":"./lib/mpns.js","engines":{"node":">= 0.5.0 <= 0.9.0"},"readme":"#mpns\r\n\r\nSend toast and live tile updates to Windows Phones through the Microsoft Push Notification Service (MPNS). Intended for the cloud and Node.js.\r\n\r\n## Installation\r\n\r\nVia [npm][]:\r\n\r\n\t$ npm install mpns\r\n\t\r\nAs a submodule of your Git project\r\n\r\n\t$ git submodule add http://github.com/jeffwilcox/mpns.git mpns\r\n\t$ git submodule update --init\r\n\r\n## Usage\r\n### Load in the module\r\n\r\n```javascript\r\nvar mpns = require('mpns');\r\n```\r\n\r\n### Sending a toast\r\nTo send a toast, simply call the `sendToast` method on mpns.\r\n\r\n```javascript\r\nvar mpns = require('mpns');\r\nmpns.sendToast(pushUri, 'Bold Text', 'This is normal text');\r\n\r\n// Optional callback\r\nmpns.sendToast(pushUri, text1, text2, callback);\r\n```\r\n\r\nEach of the methods that send tile and toast notifications have two alternative parameter signatures:\r\n\r\n```\r\nsend*(pushUri, [options], [callback]) \r\nsend*(pushUri, string1, string2, ..., [callback])\r\n```\r\n\r\nThe ordering of the parameters in the non-object calling method assumes ordering as documented in the toast or tile-specific sections below.\r\n\r\nFor toasts, the properties and ordering for them:\r\n\r\n* `text1` the text of the toast, this first text will appear bold on the phone\r\n* `text2` additional toast text, will appear in the normal font. It does not wrap.\r\n* `param` optional URI parameter within your application specifying the XAML page to open within the app, along with any query string parameters for the page's context\r\n\r\n### Sending a live tile update\r\nTo send a tile update, call the `sendTile` method on mpns.\r\n\r\nIt is recommended that you use the options syntax for this call as it is possible for the live tile update to include just one component in the update, say the tile count, and not update other properties.\r\n\r\nThe option names or ordering for parameters is:\r\n\r\n* `backgroundImage` URI to the background image for the tile. Beware that the URI may be restricted to the whitelisted domain names that you provided in your application.\r\n* `count` the number to appear in the tile\r\n* `title` the title of the tile\r\n* `backBackgroundImage` URI to the image to be on the flip side of the tile\r\n* `backTitle` optional title for the back tile\r\n* `backContent` optional content for the back tile (appears in a larger font size)\r\n\r\n### Create a new notification object\r\nYou can create a new notification object (either of type live tile or toast). This is the original style for this module but it is now recommended that you use the shorter `send*` syntax on the mpns object itself. This aligns with the WNS module for Windows in its simplicity.\r\n\r\nProperty names for the notification object directly correlate to the names used in the MPNS XML payload as documented on MSDN. Properties can either be set directly on the object (such as toast.text1) or by passing the values in as options to the constructor.\r\n\r\n```javascript\r\noptions = { text1: 'Hello!', text2: 'Great to see you today.' };\r\nvar toast = new mpns.toast(options);\r\n```\r\n\r\n### Sending a raw notification\r\nWhen creating the notification object, either provide the raw payload first, or as the `options.payload` property.\r\n\r\n```javascript\r\nvar raw = new mpns.rawNotification('My Raw Payload', options);\r\n```\r\n\r\nToday the type on the request is set to UTF8 explicitly.\r\n\r\n### Results object information\r\nA results object is passed back through the callback and has important information from MPNS.\r\n\r\n- `deviceConnectionStatus`: The device status as reported by the service.\r\n- `notificationStatus`: The status of your provided notification.\r\n- `subscriptionStatus`: The status of the subscription URI.\r\n\r\nThe object will also contain all the key fields for your toast or live tile update, plus the pushType. This makes it easy to store this information in a history log somewhere in the ether.\r\n\r\n### Handling Errors\r\nIt is very important as a consumer that you store appropriate actionable data about failed push notification attempts. As a result, the callback's first parameter (err) is set to the standard results object as well as a few additional fields depending on the returned status code from the server.\r\n\r\nRemember to take action on that information in order to be a good MPNS citizen. These values may be set in the error object and of interest to you:\r\n\r\n- `minutesToDelay`: If this is present, it is the suggested minimum amount of time that you should wait until making another request to the same subscription URI. For HTTP 412s, for example, the minimum time is one hour and so the returned value defaults to 61.\r\n- `shouldDeleteChannel`: If this is set to `true`, the channel is gone according to MPNS. Delete it from your channel/subscription database and never look back.\r\n- `error`: If an error is captured while trying to make the HTTP request, this will be set to that error callback instance.\r\n\r\n### A note about Windows Phone 7.5\r\nThis module permits sending toasts and tiles specific to Mango. If you include the `param` field when sending a push to a 7.0 (first Windows Phone release) phone, unfortunately it may not be received, or will error out the subscription.\r\n\r\nTake care when registering your subscription channels with your cloud service to include the application platform version of the app (7.1 for Mango apps). To rock, maybe also grab the OS version and deployed app version. That information can be helpful when supporting customers.\r\n\r\n## Credits\r\n\r\nNPM module written and maintained by [Jeff Wilcox] with contributions from:\r\n\r\n- Jeff Wilcox : https://github.com/jeffwilcox\r\n- Shawn Burke : https://github.com/shawnburke\r\n- Jeremie Pelletier : https://github.com/ddude\r\n\r\n## License\r\n\r\nCopyright Jeff Wilcox\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n[Jeff Wilcox]: http://www.jeff.wilcox.name\r\n[npm]: http://github.com/isaacs/npm\r\n\r\n## Changelog\r\n\r\n1.1.1:\r\n\r\n* Adds parameter validation that will throw, for robustness.\r\n\r\n1.1.0:\r\n\r\n* Adds `sendText` and `sendTile` methods more consistent with the WNS module, removing the need to create a new object, only to then call send on it with a push URI.\r\n\r\n1.0.4:\r\n\r\n* Adds support for Node.js through 0.9.0\r\n\r\n1.0.3:\r\n\r\n* Addresses issues when using numbers to set the tile data\r\n* Cleans up string encoding functions.\r\n\r\n1.0.2:\r\n\r\n* Fixes some small formatting issues.\r\n\r\n1.0.1:\r\n\r\n* Adds raw notification type support.\r\n\r\n1.0.0:\r\n\r\n* Initial implementation offering basic live tile and toast (no raw) support.\r\n","_id":"mpns@1.1.2","dist":{"shasum":"5ba5541fff631886806737e58b6cd4a2e622ff27","tarball":"http://registry.npmjs.org/mpns/-/mpns-1.1.2.tgz"},"maintainers":[{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"}],"directories":{}},"1.2.3":{"name":"mpns","description":"A Node.js interface to the Microsoft Push Notification Service (MPNS) for Windows Phone.","version":"1.2.3","author":{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},"contributors":[{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},{"name":"Yavor Georgiev"}],"keywords":["mpns","notifications","wp","windows phone","microsoft","push","push notifications"],"repository":{"type":"git","url":"git://github.com/jeffwilcox/mpns.git"},"main":"./lib/mpns.js","engines":{"node":">= 0.5.0 <= 0.9.0"},"readme":"#mpns\r\n\r\nSend toast and live tile updates to Windows Phones through the Microsoft Push Notification Service (MPNS). Intended for the cloud and Node.js.\r\n\r\n## Installation\r\n\r\nVia [npm][]:\r\n\r\n\t$ npm install mpns\r\n\t\r\nAs a submodule of your Git project\r\n\r\n\t$ git submodule add http://github.com/jeffwilcox/mpns.git mpns\r\n\t$ git submodule update --init\r\n\r\n## Usage\r\n### Load in the module\r\n\r\n```javascript\r\nvar mpns = require('mpns');\r\n```\r\n\r\n### Sending a toast\r\nTo send a toast, simply call the `sendToast` method on mpns.\r\n\r\n```javascript\r\nvar mpns = require('mpns');\r\nmpns.sendToast(pushUri, 'Bold Text', 'This is normal text');\r\n\r\n// Optional callback\r\nmpns.sendToast(pushUri, text1, text2, callback);\r\n```\r\n\r\nEach of the methods that send tile and toast notifications have two alternative parameter signatures:\r\n\r\n```\r\nsend*(pushUri, [options], [callback]) \r\nsend*(pushUri, string1, string2, ..., [callback])\r\n```\r\n\r\nThe ordering of the parameters in the non-object calling method assumes ordering as documented in the toast or tile-specific sections below.\r\n\r\nFor toasts, the properties and ordering for them:\r\n\r\n* `text1` the text of the toast, this first text will appear bold on the phone\r\n* `text2` additional toast text, will appear in the normal font. It does not wrap.\r\n* `param` optional URI parameter within your application specifying the XAML page to open within the app, along with any query string parameters for the page's context\r\n\r\n### Sending a live tile update\r\nTo send a tile update, call the `sendTile` method on mpns.\r\n\r\nIt is recommended that you use the options syntax for this call as it is possible for the live tile update to include just one component in the update, say the tile count, and not update other properties. To clear the value of a property, simply pass `null` as the value.\r\n\r\nThe option names or ordering for parameters is:\r\n\r\n* `backgroundImage` URI to the background image for the tile. Beware that the URI may be restricted to the whitelisted domain names that you provided in your application.\r\n* `count` the number to appear in the tile\r\n* `title` the title of the tile\r\n* `backBackgroundImage` URI to the image to be on the flip side of the tile\r\n* `backTitle` optional title for the back tile\r\n* `backContent` optional content for the back tile (appears in a larger font size)\r\n* `id` optional ID for a secodary tile\r\n\r\nSome devices support an enhanced tile format called a \"flip tile\", which supports some additional parameters. This kind of tile can be sent using the `sendFlipTile` method, which supports *all of the above* parameters as well as:\r\n* `smallbackgroundImage` URI to the background image for the tile when it is shrunk to small size\r\n* `wideBackgroundImage` URI to the background image for the tile when it is expanded to wide size\r\n* `wideBackContent` content for the back tile (appears in a larger font size) when the tile is expanded to wide size\r\n* `wideBackBackgroundImage` URI to the image to be on the flip side of the tile when the tile is expanded to wide size\r\n\r\n\r\n### Create a new notification object\r\nYou can create a new notification object (either of type live tile or toast). This is the original style for this module but it is now recommended that you use the shorter `send*` syntax on the mpns object itself. This aligns with the WNS module for Windows in its simplicity.\r\n\r\nProperty names for the notification object directly correlate to the names used in the MPNS XML payload as documented on MSDN. Properties can either be set directly on the object (such as toast.text1) or by passing the values in as options to the constructor.\r\n\r\n```javascript\r\noptions = { text1: 'Hello!', text2: 'Great to see you today.' };\r\nvar toast = new mpns.toast(options);\r\n```\r\n\r\n### Sending a raw notification\r\nWhen creating the notification object, either provide the raw payload first, or as the `options.payload` property.\r\n\r\n```javascript\r\nvar raw = new mpns.rawNotification('My Raw Payload', options);\r\n```\r\n\r\nToday the type on the request is set to UTF8 explicitly.\r\n\r\n### Results object information\r\nA results object is passed back through the callback and has important information from MPNS.\r\n\r\n- `deviceConnectionStatus`: The device status as reported by the service.\r\n- `notificationStatus`: The status of your provided notification.\r\n- `subscriptionStatus`: The status of the subscription URI.\r\n\r\nThe object will also contain all the key fields for your toast or live tile update, plus the pushType. This makes it easy to store this information in a history log somewhere in the ether.\r\n\r\n### Handling Errors\r\nIt is very important as a consumer that you store appropriate actionable data about failed push notification attempts. As a result, the callback's first parameter (err) is set to the standard results object as well as a few additional fields depending on the returned status code from the server.\r\n\r\nRemember to take action on that information in order to be a good MPNS citizen. These values may be set in the error object and of interest to you:\r\n\r\n- `minutesToDelay`: If this is present, it is the suggested minimum amount of time that you should wait until making another request to the same subscription URI. For HTTP 412s, for example, the minimum time is one hour and so the returned value defaults to 61.\r\n- `shouldDeleteChannel`: If this is set to `true`, the channel is gone according to MPNS. Delete it from your channel/subscription database and never look back.\r\n- `innerError`: If an error is captured while trying to make the HTTP request, this will be set to that error callback instance.\r\n\r\n### A note about different Windows Phone versions\r\nThis module permits sending toasts and tiles supported only on specific versions of Windows Phone. If you use those features on a version where they are unsupported, unfortunately notifications may not be received, or will error out the subscription.\r\n\r\nTake care when registering your subscription channels with your cloud service to include the application platform version of the app (7.1 for Mango apps). To rock, maybe also grab the OS version and deployed app version. That information can be helpful when supporting customers.\r\n\r\nHere is a list of features that are only supported in given versions of Windows Phone:\r\n* Only supported in Windows Phone 7.5+ (Mango)\r\n    * Including the `param` field when sending a push\r\n    * Including the `id` parameter when sending a tile\r\n* Only supported in Windows Phone 7.8+\r\n    * Sending \"flip\" tiles\r\n\r\n\r\n## Credits\r\n\r\nNPM module written and maintained by [Jeff Wilcox] with contributions from:\r\n\r\n- Jeff Wilcox : https://github.com/jeffwilcox\r\n- Shawn Burke : https://github.com/shawnburke\r\n- Jeremie Pelletier : https://github.com/ddude\r\n- Yavor Georgiev: https://github.com/yavorg\r\n\r\n## License\r\n\r\nCopyright Jeff Wilcox\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n[Jeff Wilcox]: http://www.jeff.wilcox.name\r\n[npm]: http://github.com/isaacs/npm\r\n\r\n## Changelog\r\n\r\n1.2.2:\r\n\r\n* Allows clearing a property value for tiles\r\n\r\n1.2.1:\r\n\r\n* Renames `sendRawNotification` to `sendRaw`\r\n* Renames `error` parameter to `innerError`\r\n* Fixes issue #8 that `sendRaw` wasn't working\r\n\r\n1.2.0:\r\n\r\n* Adds support for `sendFlipTile` method to support the new kinds of tiles added in 7.8+ devices\r\n* Adds support for secondary tiles via the `id` parameter\r\n\r\n1.1.1:\r\n\r\n* Adds parameter validation that will throw, for robustness.\r\n\r\n1.1.0:\r\n\r\n* Adds `sendText` and `sendTile` methods more consistent with the WNS module, removing the need to create a new object, only to then call send on it with a push URI.\r\n\r\n1.0.4:\r\n\r\n* Adds support for Node.js through 0.9.0\r\n\r\n1.0.3:\r\n\r\n* Addresses issues when using numbers to set the tile data\r\n* Cleans up string encoding functions.\r\n\r\n1.0.2:\r\n\r\n* Fixes some small formatting issues.\r\n\r\n1.0.1:\r\n\r\n* Adds raw notification type support.\r\n\r\n1.0.0:\r\n\r\n* Initial implementation offering basic live tile and toast (no raw) support.\r\n","_id":"mpns@1.2.3","dist":{"shasum":"76ddee56ce1382a3d635e3a6a729b160d046c744","tarball":"http://registry.npmjs.org/mpns/-/mpns-1.2.3.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"},"maintainers":[{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"}],"directories":{}},"1.2.4":{"name":"mpns","description":"A Node.js interface to the Microsoft Push Notification Service (MPNS) for Windows Phone.","version":"1.2.4","author":{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},"contributors":[{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},{"name":"Yavor Georgiev"}],"keywords":["mpns","notifications","wp","windows phone","microsoft","push","push notifications"],"repository":{"type":"git","url":"git://github.com/jeffwilcox/mpns.git"},"main":"./lib/mpns.js","engines":{"node":">= 0.5.0 <= 0.9.0"},"readme":"#mpns\r\n\r\nSend toast and live tile updates to Windows Phones through the Microsoft Push Notification Service (MPNS). Intended for the cloud and Node.js.\r\n\r\n## Installation\r\n\r\nVia [npm][]:\r\n\r\n\t$ npm install mpns\r\n\t\r\nAs a submodule of your Git project\r\n\r\n\t$ git submodule add http://github.com/jeffwilcox/mpns.git mpns\r\n\t$ git submodule update --init\r\n\r\n## Usage\r\n### Load in the module\r\n\r\n```javascript\r\nvar mpns = require('mpns');\r\n```\r\n\r\n### Sending a toast\r\nTo send a toast, simply call the `sendToast` method on mpns.\r\n\r\n```javascript\r\nvar mpns = require('mpns');\r\nmpns.sendToast(pushUri, 'Bold Text', 'This is normal text');\r\n\r\n// Optional callback\r\nmpns.sendToast(pushUri, text1, text2, callback);\r\n```\r\n\r\nEach of the methods that send tile and toast notifications have two alternative parameter signatures:\r\n\r\n```\r\nsend*(pushUri, [options], [callback]) \r\nsend*(pushUri, string1, string2, ..., [callback])\r\n```\r\n\r\nThe ordering of the parameters in the non-object calling method assumes ordering as documented in the toast or tile-specific sections below.\r\n\r\nFor toasts, the properties and ordering for them:\r\n\r\n* `text1` the text of the toast, this first text will appear bold on the phone\r\n* `text2` additional toast text, will appear in the normal font. It does not wrap.\r\n* `param` optional URI parameter within your application specifying the XAML page to open within the app, along with any query string parameters for the page's context\r\n\r\n### Sending a live tile update\r\nTo send a tile update, call the `sendTile` method on mpns.\r\n\r\nIt is recommended that you use the options syntax for this call as it is possible for the live tile update to include just one component in the update, say the tile count, and not update other properties. To clear the value of a property, simply pass `null` as the value.\r\n\r\nThe option names or ordering for parameters is:\r\n\r\n* `backgroundImage` URI to the background image for the tile. Beware that the URI may be restricted to the whitelisted domain names that you provided in your application.\r\n* `count` the number to appear in the tile\r\n* `title` the title of the tile\r\n* `backBackgroundImage` URI to the image to be on the flip side of the tile\r\n* `backTitle` optional title for the back tile\r\n* `backContent` optional content for the back tile (appears in a larger font size)\r\n* `id` optional ID for a secodary tile\r\n\r\nSome devices support an enhanced tile format called a \"flip tile\", which supports some additional parameters. This kind of tile can be sent using the `sendFlipTile` method, which supports *all of the above* parameters as well as:\r\n* `smallBackgroundImage` URI to the background image for the tile when it is shrunk to small size\r\n* `wideBackgroundImage` URI to the background image for the tile when it is expanded to wide size\r\n* `wideBackContent` content for the back tile (appears in a larger font size) when the tile is expanded to wide size\r\n* `wideBackBackgroundImage` URI to the image to be on the flip side of the tile when the tile is expanded to wide size\r\n\r\n\r\n### Create a new notification object\r\nYou can create a new notification object (either of type live tile or toast). This is the original style for this module but it is now recommended that you use the shorter `send*` syntax on the mpns object itself. This aligns with the WNS module for Windows in its simplicity.\r\n\r\nProperty names for the notification object directly correlate to the names used in the MPNS XML payload as documented on MSDN. Properties can either be set directly on the object (such as toast.text1) or by passing the values in as options to the constructor.\r\n\r\n```javascript\r\noptions = { text1: 'Hello!', text2: 'Great to see you today.' };\r\nvar toast = new mpns.toast(options);\r\n```\r\n\r\n### Sending a raw notification\r\nWhen creating the notification object, either provide the raw payload first, or as the `options.payload` property.\r\n\r\n```javascript\r\nvar raw = new mpns.rawNotification('My Raw Payload', options);\r\n```\r\n\r\nToday the type on the request is set to UTF8 explicitly.\r\n\r\n### Results object information\r\nA results object is passed back through the callback and has important information from MPNS.\r\n\r\n- `deviceConnectionStatus`: The device status as reported by the service.\r\n- `notificationStatus`: The status of your provided notification.\r\n- `subscriptionStatus`: The status of the subscription URI.\r\n\r\nThe object will also contain all the key fields for your toast or live tile update, plus the pushType. This makes it easy to store this information in a history log somewhere in the ether.\r\n\r\n### Handling Errors\r\nIt is very important as a consumer that you store appropriate actionable data about failed push notification attempts. As a result, the callback's first parameter (err) is set to the standard results object as well as a few additional fields depending on the returned status code from the server.\r\n\r\nRemember to take action on that information in order to be a good MPNS citizen. These values may be set in the error object and of interest to you:\r\n\r\n- `minutesToDelay`: If this is present, it is the suggested minimum amount of time that you should wait until making another request to the same subscription URI. For HTTP 412s, for example, the minimum time is one hour and so the returned value defaults to 61.\r\n- `shouldDeleteChannel`: If this is set to `true`, the channel is gone according to MPNS. Delete it from your channel/subscription database and never look back.\r\n- `innerError`: If an error is captured while trying to make the HTTP request, this will be set to that error callback instance.\r\n\r\n### A note about different Windows Phone versions\r\nThis module permits sending toasts and tiles supported only on specific versions of Windows Phone. If you use those features on a version where they are unsupported, unfortunately notifications may not be received, or will error out the subscription.\r\n\r\nTake care when registering your subscription channels with your cloud service to include the application platform version of the app (7.1 for Mango apps). To rock, maybe also grab the OS version and deployed app version. That information can be helpful when supporting customers.\r\n\r\nHere is a list of features that are only supported in given versions of Windows Phone:\r\n* Only supported in Windows Phone 7.5+ (Mango)\r\n    * Including the `param` field when sending a push\r\n    * Including the `id` parameter when sending a tile\r\n* Only supported in Windows Phone 7.8+\r\n    * Sending \"flip\" tiles\r\n\r\n\r\n## Credits\r\n\r\nNPM module written and maintained by [Jeff Wilcox] with contributions from:\r\n\r\n- Jeff Wilcox : https://github.com/jeffwilcox\r\n- Shawn Burke : https://github.com/shawnburke\r\n- Jeremie Pelletier : https://github.com/ddude\r\n- Yavor Georgiev: https://github.com/yavorg\r\n\r\n## License\r\n\r\nCopyright Jeff Wilcox\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n[Jeff Wilcox]: http://www.jeff.wilcox.name\r\n[npm]: http://github.com/isaacs/npm\r\n\r\n## Changelog\r\n\r\n1.2.4:\r\n\r\n* Fixes a small typo in smallBackgroundImage (thanks @rs)\r\n* Adds error handling when URLs cannot be resolved\r\n\r\n1.2.3:\r\n\r\n* Uses `url.parse` to support hostnames with ports \r\n\r\n1.2.2:\r\n\r\n* Allows clearing a property value for tiles\r\n\r\n1.2.1:\r\n\r\n* Renames `sendRawNotification` to `sendRaw`\r\n* Renames `error` parameter to `innerError`\r\n* Fixes issue #8 that `sendRaw` wasn't working\r\n\r\n1.2.0:\r\n\r\n* Adds support for `sendFlipTile` method to support the new kinds of tiles added in 7.8+ devices\r\n* Adds support for secondary tiles via the `id` parameter\r\n\r\n1.1.1:\r\n\r\n* Adds parameter validation that will throw, for robustness.\r\n\r\n1.1.0:\r\n\r\n* Adds `sendText` and `sendTile` methods more consistent with the WNS module, removing the need to create a new object, only to then call send on it with a push URI.\r\n\r\n1.0.4:\r\n\r\n* Adds support for Node.js through 0.9.0\r\n\r\n1.0.3:\r\n\r\n* Addresses issues when using numbers to set the tile data\r\n* Cleans up string encoding functions.\r\n\r\n1.0.2:\r\n\r\n* Fixes some small formatting issues.\r\n\r\n1.0.1:\r\n\r\n* Adds raw notification type support.\r\n\r\n1.0.0:\r\n\r\n* Initial implementation offering basic live tile and toast (no raw) support.\r\n","_id":"mpns@1.2.4","dist":{"shasum":"bc8a48caf001a43453f203d55a48b4da7f3a814b","tarball":"http://registry.npmjs.org/mpns/-/mpns-1.2.4.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"},"maintainers":[{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"}],"directories":{}},"1.2.5":{"name":"mpns","description":"A Node.js interface to the Microsoft Push Notification Service (MPNS) for Windows Phone.","version":"1.2.5","author":{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},"contributors":[{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},{"name":"Yavor Georgiev"}],"keywords":["mpns","notifications","wp","windows phone","microsoft","push","push notifications"],"repository":{"type":"git","url":"git://github.com/jeffwilcox/mpns.git"},"main":"./lib/mpns.js","engines":{"node":">= 0.5.0"},"readme":"#mpns\r\n\r\nSend toast and live tile updates to Windows Phones through the Microsoft Push Notification Service (MPNS). Intended for the cloud and Node.js.\r\n\r\n## Installation\r\n\r\nVia [npm][]:\r\n\r\n\t$ npm install mpns\r\n\t\r\nAs a submodule of your Git project\r\n\r\n\t$ git submodule add http://github.com/jeffwilcox/mpns.git mpns\r\n\t$ git submodule update --init\r\n\r\n## Usage\r\n### Load in the module\r\n\r\n```javascript\r\nvar mpns = require('mpns');\r\n```\r\n\r\n### Sending a toast\r\nTo send a toast, simply call the `sendToast` method on mpns.\r\n\r\n```javascript\r\nvar mpns = require('mpns');\r\nmpns.sendToast(pushUri, 'Bold Text', 'This is normal text');\r\n\r\n// Optional callback\r\nmpns.sendToast(pushUri, text1, text2, callback);\r\n```\r\n\r\nEach of the methods that send tile and toast notifications have two alternative parameter signatures:\r\n\r\n```\r\nsend*(pushUri, [options], [callback]) \r\nsend*(pushUri, string1, string2, ..., [callback])\r\n```\r\n\r\nThe ordering of the parameters in the non-object calling method assumes ordering as documented in the toast or tile-specific sections below.\r\n\r\nFor toasts, the properties and ordering for them:\r\n\r\n* `text1` the text of the toast, this first text will appear bold on the phone\r\n* `text2` additional toast text, will appear in the normal font. It does not wrap.\r\n* `param` optional URI parameter within your application specifying the XAML page to open within the app, along with any query string parameters for the page's context\r\n\r\n### Sending a live tile update\r\nTo send a tile update, call the `sendTile` method on mpns.\r\n\r\nIt is recommended that you use the options syntax for this call as it is possible for the live tile update to include just one component in the update, say the tile count, and not update other properties. To clear the value of a property, simply pass `null` as the value.\r\n\r\nThe option names or ordering for parameters is:\r\n\r\n* `backgroundImage` URI to the background image for the tile. Beware that the URI may be restricted to the whitelisted domain names that you provided in your application.\r\n* `count` the number to appear in the tile\r\n* `title` the title of the tile\r\n* `backBackgroundImage` URI to the image to be on the flip side of the tile\r\n* `backTitle` optional title for the back tile\r\n* `backContent` optional content for the back tile (appears in a larger font size)\r\n* `id` optional ID for a secodary tile\r\n\r\nSome devices support an enhanced tile format called a \"flip tile\", which supports some additional parameters. This kind of tile can be sent using the `sendFlipTile` method, which supports *all of the above* parameters as well as:\r\n* `smallBackgroundImage` URI to the background image for the tile when it is shrunk to small size\r\n* `wideBackgroundImage` URI to the background image for the tile when it is expanded to wide size\r\n* `wideBackContent` content for the back tile (appears in a larger font size) when the tile is expanded to wide size\r\n* `wideBackBackgroundImage` URI to the image to be on the flip side of the tile when the tile is expanded to wide size\r\n\r\n\r\n### Create a new notification object\r\nYou can create a new notification object (either of type live tile or toast). This is the original style for this module but it is now recommended that you use the shorter `send*` syntax on the mpns object itself. This aligns with the WNS module for Windows in its simplicity.\r\n\r\nProperty names for the notification object directly correlate to the names used in the MPNS XML payload as documented on MSDN. Properties can either be set directly on the object (such as toast.text1) or by passing the values in as options to the constructor.\r\n\r\n```javascript\r\noptions = { text1: 'Hello!', text2: 'Great to see you today.' };\r\nvar toast = new mpns.toast(options);\r\n```\r\n\r\n### Sending a raw notification\r\nWhen creating the notification object, either provide the raw payload first, or as the `options.payload` property.\r\n\r\n```javascript\r\nvar raw = new mpns.rawNotification('My Raw Payload', options);\r\n```\r\n\r\nToday the type on the request is set to UTF8 explicitly.\r\n\r\n### Using authenticated channels (MTLS)\r\nYou may use authenticated channels for the push notifications. Further information can be found here:http://msdn.microsoft.com/en-us/library/windowsphone/develop/ff941099(v=vs.105).aspx\r\n\r\nAuthenticated channels require a TLS client certificate for client authentication against the MPNS server.\r\nThe TLS certificate is registered in your Microsoft Phone Development Dashboard.\r\nThe CN of the certificate is used in the APP as Service Name in the HttpNotificationChannel constructor.\r\n\r\nTo use authentication you must provide the client certificate (including the private key) to the options of the send* functions.\r\nThe client certificate is used when the pushURI is a https URI.\r\n\r\nThe following options from tls.connect() can be specified:\r\n\r\n* `pfx` Certificate, Private key and CA certificates to use for SSL. Default null.\r\n* `key` Private key to use for SSL. Default null.\r\n* `passphrase`  A string of passphrase for the private key or pfx. Default null.\r\n* `cert` Public x509 certificate to use. Default null.\r\n* `ca` An authority certificate or array of authority certificates to check the remote host against.\r\n* `ciphers` A string describing the ciphers to use or exclude.\r\n* `rejectUnauthorized` If true, the server certificate is verified against the list of supplied CAs. An 'error' event is emitted if verification fails. Verification happens at the connection level, before the HTTP request is sent. Default true.\r\n\r\n```javascript\r\nvar options = { \r\n\ttext1: 'Hello!',\r\n\ttext2: 'Great to see you today.'\r\n\tcert: fs.readFileSync('mycert.pem'),\r\n\tkey: fs.readFileSync('mycertkey.pem')\r\n\t};\r\n\r\nmpns.sendToast(httpspushUri, options, callback);\r\n```\r\n\r\n### Results object information\r\nA results object is passed back through the callback and has important information from MPNS.\r\n\r\n- `deviceConnectionStatus`: The device status as reported by the service.\r\n- `notificationStatus`: The status of your provided notification.\r\n- `subscriptionStatus`: The status of the subscription URI.\r\n\r\nThe object will also contain all the key fields for your toast or live tile update, plus the pushType. This makes it easy to store this information in a history log somewhere in the ether.\r\n\r\n### Handling Errors\r\nIt is very important as a consumer that you store appropriate actionable data about failed push notification attempts. As a result, the callback's first parameter (err) is set to the standard results object as well as a few additional fields depending on the returned status code from the server.\r\n\r\nRemember to take action on that information in order to be a good MPNS citizen. These values may be set in the error object and of interest to you:\r\n\r\n- `minutesToDelay`: If this is present, it is the suggested minimum amount of time that you should wait until making another request to the same subscription URI. For HTTP 412s, for example, the minimum time is one hour and so the returned value defaults to 61.\r\n- `shouldDeleteChannel`: If this is set to `true`, the channel is gone according to MPNS. Delete it from your channel/subscription database and never look back.\r\n- `innerError`: If an error is captured while trying to make the HTTP request, this will be set to that error callback instance.\r\n\r\n### A note about different Windows Phone versions\r\nThis module permits sending toasts and tiles supported only on specific versions of Windows Phone. If you use those features on a version where they are unsupported, unfortunately notifications may not be received, or will error out the subscription.\r\n\r\nTake care when registering your subscription channels with your cloud service to include the application platform version of the app (7.1 for Mango apps). To rock, maybe also grab the OS version and deployed app version. That information can be helpful when supporting customers.\r\n\r\nHere is a list of features that are only supported in given versions of Windows Phone:\r\n* For Windows Phone 7.0\r\n\t* Do not use the `param` or other fields as indicated below and it should work OK.\r\n* Only supported in Windows Phone 7.5+ (Mango/WP 7.1 OS)\r\n    * Including the `param` field when sending a push\r\n    * Including the `id` parameter when sending a tile\r\n* Only supported in Windows Phone 7.8+ (including Windows Phone 8)\r\n    * Sending \"flip\" tiles\r\n\r\n## Credits\r\n\r\nNPM module written and maintained by [Jeff Wilcox] with contributions from:\r\n\r\n- Jeff Wilcox : https://github.com/jeffwilcox\r\n- Shawn Burke : https://github.com/shawnburke\r\n- Jeremie Pelletier : https://github.com/ddude\r\n- Yavor Georgiev: https://github.com/yavorg\r\n\r\n## License\r\n\r\nCopyright Jeff Wilcox\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n[Jeff Wilcox]: http://www.jeff.wilcox.name\r\n[npm]: http://github.com/isaacs/npm\r\n\r\n## Changelog\r\n\r\n1.2.5:\r\n\r\n* Adds support for TLS/HTTPS authenticated push channels\r\n\r\n1.2.4:\r\n\r\n* Fixes a small typo in smallBackgroundImage (thanks @rs)\r\n* Adds error handling when URLs cannot be resolved\r\n\r\n1.2.3:\r\n\r\n* Uses `url.parse` to support hostnames with ports \r\n\r\n1.2.2:\r\n\r\n* Allows clearing a property value for tiles\r\n\r\n1.2.1:\r\n\r\n* Renames `sendRawNotification` to `sendRaw`\r\n* Renames `error` parameter to `innerError`\r\n* Fixes issue #8 that `sendRaw` wasn't working\r\n\r\n1.2.0:\r\n\r\n* Adds support for `sendFlipTile` method to support the new kinds of tiles added in 7.8+ devices\r\n* Adds support for secondary tiles via the `id` parameter\r\n\r\n1.1.1:\r\n\r\n* Adds parameter validation that will throw, for robustness.\r\n\r\n1.1.0:\r\n\r\n* Adds `sendText` and `sendTile` methods more consistent with the WNS module, removing the need to create a new object, only to then call send on it with a push URI.\r\n\r\n1.0.4:\r\n\r\n* Adds support for Node.js through 0.9.0\r\n\r\n1.0.3:\r\n\r\n* Addresses issues when using numbers to set the tile data\r\n* Cleans up string encoding functions.\r\n\r\n1.0.2:\r\n\r\n* Fixes some small formatting issues.\r\n\r\n1.0.1:\r\n\r\n* Adds raw notification type support.\r\n\r\n1.0.0:\r\n\r\n* Initial implementation offering basic live tile and toast (no raw) support.\r\n","_id":"mpns@1.2.5","dist":{"shasum":"42b1e9c7b9a4360b0f5be8bb66588a1a67b28e77","tarball":"http://registry.npmjs.org/mpns/-/mpns-1.2.5.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"},"maintainers":[{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"}],"directories":{}},"1.2.6":{"name":"mpns","description":"A Node.js interface to the Microsoft Push Notification Service (MPNS) for Windows Phone.","version":"1.2.6","author":{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},"contributors":[{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},{"name":"Yavor Georgiev"}],"keywords":["mpns","notifications","wp","windows phone","microsoft","push","push notifications"],"repository":{"type":"git","url":"git://github.com/jeffwilcox/mpns.git"},"main":"./lib/mpns.js","engines":{"node":">= 0.5.0"},"readme":"#mpns\r\n\r\nSend toast and live tile updates to Windows Phones through the Microsoft Push Notification Service (MPNS). Intended for the cloud and Node.js.\r\n\r\n## Installation\r\n\r\nVia [npm][]:\r\n\r\n\t$ npm install mpns\r\n\t\r\nAs a submodule of your Git project\r\n\r\n\t$ git submodule add http://github.com/jeffwilcox/mpns.git mpns\r\n\t$ git submodule update --init\r\n\r\n## Usage\r\n### Load in the module\r\n\r\n```javascript\r\nvar mpns = require('mpns');\r\n```\r\n\r\n### Sending a toast\r\nTo send a toast, simply call the `sendToast` method on mpns.\r\n\r\n```javascript\r\nvar mpns = require('mpns');\r\nmpns.sendToast(pushUri, 'Bold Text', 'This is normal text');\r\n\r\n// Optional callback\r\nmpns.sendToast(pushUri, text1, text2, callback);\r\n```\r\n\r\nEach of the methods that send tile and toast notifications have two alternative parameter signatures:\r\n\r\n```\r\nsend*(pushUri, [options], [callback]) \r\nsend*(pushUri, string1, string2, ..., [callback])\r\n```\r\n\r\nThe ordering of the parameters in the non-object calling method assumes ordering as documented in the toast or tile-specific sections below.\r\n\r\nFor toasts, the properties and ordering for them:\r\n\r\n* `text1` the text of the toast, this first text will appear bold on the phone\r\n* `text2` additional toast text, will appear in the normal font. It does not wrap.\r\n* `param` optional URI parameter within your application specifying the XAML page to open within the app, along with any query string parameters for the page's context\r\n\r\n### Sending a live tile update\r\nTo send a tile update, call the `sendTile` method on mpns.\r\n\r\nIt is recommended that you use the options syntax for this call as it is possible for the live tile update to include just one component in the update, say the tile count, and not update other properties. To clear the value of a property, simply pass `null` as the value.\r\n\r\nThe option names or ordering for parameters is:\r\n\r\n* `backgroundImage` URI to the background image for the tile. Beware that the URI may be restricted to the whitelisted domain names that you provided in your application.\r\n* `count` the number to appear in the tile\r\n* `title` the title of the tile\r\n* `backBackgroundImage` URI to the image to be on the flip side of the tile\r\n* `backTitle` optional title for the back tile\r\n* `backContent` optional content for the back tile (appears in a larger font size)\r\n* `id` optional ID for a secodary tile\r\n\r\nSome devices support an enhanced tile format called a \"flip tile\", which supports some additional parameters. This kind of tile can be sent using the `sendFlipTile` method, which supports *all of the above* parameters as well as:\r\n* `smallBackgroundImage` URI to the background image for the tile when it is shrunk to small size\r\n* `wideBackgroundImage` URI to the background image for the tile when it is expanded to wide size\r\n* `wideBackContent` content for the back tile (appears in a larger font size) when the tile is expanded to wide size\r\n* `wideBackBackgroundImage` URI to the image to be on the flip side of the tile when the tile is expanded to wide size\r\n\r\n\r\n### Create a new notification object\r\nYou can create a new notification object (either of type live tile or toast). This is the original style for this module but it is now recommended that you use the shorter `send*` syntax on the mpns object itself. This aligns with the WNS module for Windows in its simplicity.\r\n\r\nProperty names for the notification object directly correlate to the names used in the MPNS XML payload as documented on MSDN. Properties can either be set directly on the object (such as toast.text1) or by passing the values in as options to the constructor.\r\n\r\n```javascript\r\noptions = { text1: 'Hello!', text2: 'Great to see you today.' };\r\nvar toast = new mpns.toast(options);\r\n```\r\n\r\n### Sending a raw notification\r\nWhen creating the notification object, either provide the raw payload first, or as the `options.payload` property.\r\n\r\n```javascript\r\nvar raw = new mpns.rawNotification('My Raw Payload', options);\r\n```\r\n\r\nToday the type on the request is set to UTF8 explicitly.\r\n\r\n### Using authenticated channels (MTLS)\r\nYou may use authenticated channels for the push notifications. Further information can be found here:http://msdn.microsoft.com/en-us/library/windowsphone/develop/ff941099(v=vs.105).aspx\r\n\r\nAuthenticated channels require a TLS client certificate for client authentication against the MPNS server.\r\nThe TLS certificate is registered in your Microsoft Phone Development Dashboard.\r\nThe CN of the certificate is used in the APP as Service Name in the HttpNotificationChannel constructor.\r\n\r\nTo use authentication you must provide the client certificate (including the private key) to the options of the send* functions.\r\nThe client certificate is used when the pushURI is a https URI.\r\n\r\nThe following options from tls.connect() can be specified:\r\n\r\n* `pfx` Certificate, Private key and CA certificates to use for SSL. Default null.\r\n* `key` Private key to use for SSL. Default null.\r\n* `passphrase`  A string of passphrase for the private key or pfx. Default null.\r\n* `cert` Public x509 certificate to use. Default null.\r\n* `ca` An authority certificate or array of authority certificates to check the remote host against.\r\n* `ciphers` A string describing the ciphers to use or exclude.\r\n* `rejectUnauthorized` If true, the server certificate is verified against the list of supplied CAs. An 'error' event is emitted if verification fails. Verification happens at the connection level, before the HTTP request is sent. Default true.\r\n\r\n```javascript\r\nvar options = { \r\n\ttext1: 'Hello!',\r\n\ttext2: 'Great to see you today.'\r\n\tcert: fs.readFileSync('mycert.pem'),\r\n\tkey: fs.readFileSync('mycertkey.pem')\r\n\t};\r\n\r\nmpns.sendToast(httpspushUri, options, callback);\r\n```\r\n\r\n### HTTP proxy support\r\n\r\nIf the options passed into a tile or push call include a `proxy` value, the proxy server information will be used. The string value should be the URI to the proxy, including host, for example: `{ proxy: 'http://yourproxy:8080'}`.\r\n\r\n### Results object information\r\nA results object is passed back through the callback and has important information from MPNS.\r\n\r\n- `deviceConnectionStatus`: The device status as reported by the service.\r\n- `notificationStatus`: The status of your provided notification.\r\n- `subscriptionStatus`: The status of the subscription URI.\r\n\r\nThe object will also contain all the key fields for your toast or live tile update, plus the pushType. This makes it easy to store this information in a history log somewhere in the ether.\r\n\r\n### Handling Errors\r\nIt is very important as a consumer that you store appropriate actionable data about failed push notification attempts. As a result, the callback's first parameter (err) is set to the standard results object as well as a few additional fields depending on the returned status code from the server.\r\n\r\nRemember to take action on that information in order to be a good MPNS citizen. These values may be set in the error object and of interest to you:\r\n\r\n- `minutesToDelay`: If this is present, it is the suggested minimum amount of time that you should wait until making another request to the same subscription URI. For HTTP 412s, for example, the minimum time is one hour and so the returned value defaults to 61.\r\n- `shouldDeleteChannel`: If this is set to `true`, the channel is gone according to MPNS. Delete it from your channel/subscription database and never look back.\r\n- `innerError`: If an error is captured while trying to make the HTTP request, this will be set to that error callback instance.\r\n\r\n### A note about different Windows Phone versions\r\nThis module permits sending toasts and tiles supported only on specific versions of Windows Phone. If you use those features on a version where they are unsupported, unfortunately notifications may not be received, or will error out the subscription.\r\n\r\nTake care when registering your subscription channels with your cloud service to include the application platform version of the app (7.1 for Mango apps). To rock, maybe also grab the OS version and deployed app version. That information can be helpful when supporting customers.\r\n\r\nHere is a list of features that are only supported in given versions of Windows Phone:\r\n* For Windows Phone 7.0\r\n\t* Do not use the `param` or other fields as indicated below and it should work OK.\r\n* Only supported in Windows Phone 7.5+ (Mango/WP 7.1 OS)\r\n    * Including the `param` field when sending a push\r\n    * Including the `id` parameter when sending a tile\r\n* Only supported in Windows Phone 7.8+ (including Windows Phone 8)\r\n    * Sending \"flip\" tiles\r\n\r\n## Credits\r\n\r\nNPM module written and maintained by [Jeff Wilcox] with contributions from:\r\n\r\n- Jeff Wilcox : https://github.com/jeffwilcox\r\n- Shawn Burke : https://github.com/shawnburke\r\n- Jeremie Pelletier : https://github.com/ddude\r\n- Yavor Georgiev: https://github.com/yavorg\r\n\r\n## License\r\n\r\nCopyright Jeff Wilcox\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n[Jeff Wilcox]: http://www.jeff.wilcox.name\r\n[npm]: http://github.com/isaacs/npm\r\n\r\n## Changelog\r\n\r\n1.2.6:\r\n\r\n* Adds support for an HTTP proxy via `options.proxy` (thanks @tjunnone)\r\n\r\n1.2.5:\r\n\r\n* Adds support for TLS/HTTPS authenticated push channels\r\n\r\n1.2.4:\r\n\r\n* Fixes a small typo in smallBackgroundImage (thanks @rs)\r\n* Adds error handling when URLs cannot be resolved\r\n\r\n1.2.3:\r\n\r\n* Uses `url.parse` to support hostnames with ports \r\n\r\n1.2.2:\r\n\r\n* Allows clearing a property value for tiles\r\n\r\n1.2.1:\r\n\r\n* Renames `sendRawNotification` to `sendRaw`\r\n* Renames `error` parameter to `innerError`\r\n* Fixes issue #8 that `sendRaw` wasn't working\r\n\r\n1.2.0:\r\n\r\n* Adds support for `sendFlipTile` method to support the new kinds of tiles added in 7.8+ devices\r\n* Adds support for secondary tiles via the `id` parameter\r\n\r\n1.1.1:\r\n\r\n* Adds parameter validation that will throw, for robustness.\r\n\r\n1.1.0:\r\n\r\n* Adds `sendText` and `sendTile` methods more consistent with the WNS module, removing the need to create a new object, only to then call send on it with a push URI.\r\n\r\n1.0.4:\r\n\r\n* Adds support for Node.js through 0.9.0\r\n\r\n1.0.3:\r\n\r\n* Addresses issues when using numbers to set the tile data\r\n* Cleans up string encoding functions.\r\n\r\n1.0.2:\r\n\r\n* Fixes some small formatting issues.\r\n\r\n1.0.1:\r\n\r\n* Adds raw notification type support.\r\n\r\n1.0.0:\r\n\r\n* Initial implementation offering basic live tile and toast (no raw) support.\r\n","_id":"mpns@1.2.6","dist":{"shasum":"3e40425de897074f4b1b54ab6837c2a4c85c11d9","tarball":"http://registry.npmjs.org/mpns/-/mpns-1.2.6.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"},"maintainers":[{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"}],"directories":{}},"1.2.7":{"name":"mpns","description":"A Node.js interface to the Microsoft Push Notification Service (MPNS) for Windows Phone.","version":"1.2.7","author":{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},"contributors":[{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},{"name":"Yavor Georgiev"}],"keywords":["mpns","notifications","wp","windows phone","microsoft","push","push notifications"],"repository":{"type":"git","url":"git://github.com/jeffwilcox/mpns.git"},"main":"./lib/mpns.js","engines":{"node":">= 0.5.0"},"test":"make test","devDependencies":{"should":"*","mocha":"*"},"readme":"#mpns\r\n\r\n[![build status](https://secure.travis-ci.org/jeffwilcox/mpns.png)](http://travis-ci.org/jeffwilcox/mpns)\r\n\r\nSend toast and live tile updates to Windows Phones through the Microsoft Push Notification Service (MPNS). Intended for the cloud and Node.js.\r\n\r\n## Installation\r\n\r\nVia [npm][]:\r\n\r\n\t$ npm install mpns\r\n\t\r\nAs a submodule of your Git project\r\n\r\n\t$ git submodule add http://github.com/jeffwilcox/mpns.git mpns\r\n\t$ git submodule update --init\r\n\r\n## Usage\r\n### Load in the module\r\n\r\n```javascript\r\nvar mpns = require('mpns');\r\n```\r\n\r\n### Sending a toast\r\nTo send a toast, simply call the `sendToast` method on mpns.\r\n\r\n```javascript\r\nvar mpns = require('mpns');\r\nmpns.sendToast(pushUri, 'Bold Text', 'This is normal text');\r\n\r\n// Optional callback\r\nmpns.sendToast(pushUri, text1, text2, callback);\r\n```\r\n\r\nEach of the methods that send tile and toast notifications have two alternative parameter signatures:\r\n\r\n```\r\nsend*(pushUri, [options], [callback]) \r\nsend*(pushUri, string1, string2, ..., [callback])\r\n```\r\n\r\nThe ordering of the parameters in the non-object calling method assumes ordering as documented in the toast or tile-specific sections below.\r\n\r\nFor toasts, the properties and ordering for them:\r\n\r\n* `text1` the text of the toast, this first text will appear bold on the phone\r\n* `text2` additional toast text, will appear in the normal font. It does not wrap.\r\n* `param` optional URI parameter within your application specifying the XAML page to open within the app, along with any query string parameters for the page's context\r\n\r\n### Sending a live tile update\r\nTo send a tile update, call the `sendTile` method on mpns.\r\n\r\nIt is recommended that you use the options syntax for this call as it is possible for the live tile update to include just one component in the update, say the tile count, and not update other properties. To clear the value of a property, simply pass `null` as the value.\r\n\r\nThe option names or ordering for parameters is:\r\n\r\n* `backgroundImage` URI to the background image for the tile. Beware that the URI may be restricted to the whitelisted domain names that you provided in your application.\r\n* `count` the number to appear in the tile\r\n* `title` the title of the tile\r\n* `backBackgroundImage` URI to the image to be on the flip side of the tile\r\n* `backTitle` optional title for the back tile\r\n* `backContent` optional content for the back tile (appears in a larger font size)\r\n* `id` optional ID for a secodary tile\r\n\r\nSome devices support an enhanced tile format called a \"flip tile\", which supports some additional parameters. This kind of tile can be sent using the `sendFlipTile` method, which supports *all of the above* parameters as well as:\r\n* `smallBackgroundImage` URI to the background image for the tile when it is shrunk to small size\r\n* `wideBackgroundImage` URI to the background image for the tile when it is expanded to wide size\r\n* `wideBackContent` content for the back tile (appears in a larger font size) when the tile is expanded to wide size\r\n* `wideBackBackgroundImage` URI to the image to be on the flip side of the tile when the tile is expanded to wide size\r\n\r\n\r\n### Create a new notification object\r\nYou can create a new notification object (either of type live tile or toast). This is the original style for this module but it is now recommended that you use the shorter `send*` syntax on the mpns object itself. This aligns with the WNS module for Windows in its simplicity.\r\n\r\nProperty names for the notification object directly correlate to the names used in the MPNS XML payload as documented on MSDN. Properties can either be set directly on the object (such as toast.text1) or by passing the values in as options to the constructor.\r\n\r\n```javascript\r\noptions = { text1: 'Hello!', text2: 'Great to see you today.' };\r\nvar toast = new mpns.toast(options);\r\n```\r\n\r\n### Sending a raw notification\r\nWhen creating the notification object, either provide the raw payload first, or as the `options.payload` property.\r\n\r\n```javascript\r\nvar raw = new mpns.rawNotification('My Raw Payload', options);\r\n```\r\n\r\nToday the type on the request is set to UTF8 explicitly.\r\n\r\n### Using authenticated channels (MTLS)\r\nYou may use authenticated channels for the push notifications. Further information can be found here:http://msdn.microsoft.com/en-us/library/windowsphone/develop/ff941099(v=vs.105).aspx\r\n\r\nAuthenticated channels require a TLS client certificate for client authentication against the MPNS server.\r\nThe TLS certificate is registered in your Microsoft Phone Development Dashboard.\r\nThe CN of the certificate is used in the APP as Service Name in the HttpNotificationChannel constructor.\r\n\r\nTo use authentication you must provide the client certificate (including the private key) to the options of the send* functions.\r\nThe client certificate is used when the pushURI is a https URI.\r\n\r\nThe following options from tls.connect() can be specified:\r\n\r\n* `pfx` Certificate, Private key and CA certificates to use for SSL. Default null.\r\n* `key` Private key to use for SSL. Default null.\r\n* `passphrase`  A string of passphrase for the private key or pfx. Default null.\r\n* `cert` Public x509 certificate to use. Default null.\r\n* `ca` An authority certificate or array of authority certificates to check the remote host against.\r\n* `ciphers` A string describing the ciphers to use or exclude.\r\n* `rejectUnauthorized` If true, the server certificate is verified against the list of supplied CAs. An 'error' event is emitted if verification fails. Verification happens at the connection level, before the HTTP request is sent. Default true.\r\n\r\n```javascript\r\nvar options = { \r\n\ttext1: 'Hello!',\r\n\ttext2: 'Great to see you today.'\r\n\tcert: fs.readFileSync('mycert.pem'),\r\n\tkey: fs.readFileSync('mycertkey.pem')\r\n\t};\r\n\r\nmpns.sendToast(httpspushUri, options, callback);\r\n```\r\n\r\n### HTTP proxy support\r\n\r\nIf the options passed into a tile or push call include a `proxy` value, the proxy server information will be used. The string value should be the URI to the proxy, including host, for example: `{ proxy: 'http://yourproxy:8080'}`.\r\n\r\n### Results object information\r\nA results object is passed back through the callback and has important information from MPNS.\r\n\r\n- `deviceConnectionStatus`: The device status as reported by the service.\r\n- `notificationStatus`: The status of your provided notification.\r\n- `subscriptionStatus`: The status of the subscription URI.\r\n\r\nThe object will also contain all the key fields for your toast or live tile update, plus the pushType. This makes it easy to store this information in a history log somewhere in the ether.\r\n\r\n### Handling Errors\r\nIt is very important as a consumer that you store appropriate actionable data about failed push notification attempts. As a result, the callback's first parameter (err) is set to the standard results object as well as a few additional fields depending on the returned status code from the server.\r\n\r\nRemember to take action on that information in order to be a good MPNS citizen. These values may be set in the error object and of interest to you:\r\n\r\n- `minutesToDelay`: If this is present, it is the suggested minimum amount of time that you should wait until making another request to the same subscription URI. For HTTP 412s, for example, the minimum time is one hour and so the returned value defaults to 61.\r\n- `shouldDeleteChannel`: If this is set to `true`, the channel is gone according to MPNS. Delete it from your channel/subscription database and never look back.\r\n- `innerError`: If an error is captured while trying to make the HTTP request, this will be set to that error callback instance.\r\n\r\n### A note about different Windows Phone versions\r\nThis module permits sending toasts and tiles supported only on specific versions of Windows Phone. If you use those features on a version where they are unsupported, unfortunately notifications may not be received, or will error out the subscription.\r\n\r\nTake care when registering your subscription channels with your cloud service to include the application platform version of the app (7.1 for Mango apps). To rock, maybe also grab the OS version and deployed app version. That information can be helpful when supporting customers.\r\n\r\nHere is a list of features that are only supported in given versions of Windows Phone:\r\n* For Windows Phone 7.0\r\n\t* Do not use the `param` or other fields as indicated below and it should work OK.\r\n* Only supported in Windows Phone 7.5+ (Mango/WP 7.1 OS)\r\n    * Including the `param` field when sending a push\r\n    * Including the `id` parameter when sending a tile\r\n* Only supported in Windows Phone 7.8+ (including Windows Phone 8)\r\n    * Sending \"flip\" tiles\r\n\r\n## Credits\r\n\r\nNPM module written and maintained by [Jeff Wilcox] with contributions from:\r\n\r\n- Jeff Wilcox : https://github.com/jeffwilcox\r\n- Shawn Burke : https://github.com/shawnburke\r\n- Jeremie Pelletier : https://github.com/ddude\r\n- Yavor Georgiev: https://github.com/yavorg\r\n\r\n## License\r\n\r\nCopyright Jeff Wilcox\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n[Jeff Wilcox]: http://www.jeff.wilcox.name\r\n[npm]: http://github.com/isaacs/npm\r\n\r\n## Changelog\r\n\r\n1.2.6:\r\n\r\n* Adds support for an HTTP proxy via `options.proxy` (thanks @tjunnone)\r\n\r\n1.2.5:\r\n\r\n* Adds support for TLS/HTTPS authenticated push channels\r\n\r\n1.2.4:\r\n\r\n* Fixes a small typo in smallBackgroundImage (thanks @rs)\r\n* Adds error handling when URLs cannot be resolved\r\n\r\n1.2.3:\r\n\r\n* Uses `url.parse` to support hostnames with ports \r\n\r\n1.2.2:\r\n\r\n* Allows clearing a property value for tiles\r\n\r\n1.2.1:\r\n\r\n* Renames `sendRawNotification` to `sendRaw`\r\n* Renames `error` parameter to `innerError`\r\n* Fixes issue #8 that `sendRaw` wasn't working\r\n\r\n1.2.0:\r\n\r\n* Adds support for `sendFlipTile` method to support the new kinds of tiles added in 7.8+ devices\r\n* Adds support for secondary tiles via the `id` parameter\r\n\r\n1.1.1:\r\n\r\n* Adds parameter validation that will throw, for robustness.\r\n\r\n1.1.0:\r\n\r\n* Adds `sendText` and `sendTile` methods more consistent with the WNS module, removing the need to create a new object, only to then call send on it with a push URI.\r\n\r\n1.0.4:\r\n\r\n* Adds support for Node.js through 0.9.0\r\n\r\n1.0.3:\r\n\r\n* Addresses issues when using numbers to set the tile data\r\n* Cleans up string encoding functions.\r\n\r\n1.0.2:\r\n\r\n* Fixes some small formatting issues.\r\n\r\n1.0.1:\r\n\r\n* Adds raw notification type support.\r\n\r\n1.0.0:\r\n\r\n* Initial implementation offering basic live tile and toast (no raw) support.\r\n","_id":"mpns@1.2.7","dist":{"shasum":"8ae218e9de5e2187f1063a588b9aca9d0ea5d1f3","tarball":"http://registry.npmjs.org/mpns/-/mpns-1.2.7.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"},"maintainers":[{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"}],"directories":{}},"1.2.8":{"name":"mpns","description":"A Node.js interface to the Microsoft Push Notification Service (MPNS) for Windows Phone.","version":"1.2.8","author":{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},"contributors":[{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},{"name":"Yavor Georgiev"}],"keywords":["mpns","notifications","wp","windows phone","microsoft","push","push notifications"],"repository":{"type":"git","url":"git://github.com/jeffwilcox/mpns.git"},"main":"./lib/mpns.js","engines":{"node":">= 0.5.0"},"test":"make test","devDependencies":{"should":"*","mocha":"*"},"readme":"#mpns\r\n\r\n[![build status](https://secure.travis-ci.org/jeffwilcox/mpns.png)](http://travis-ci.org/jeffwilcox/mpns)\r\n\r\nSend toast and live tile updates to Windows Phones through the Microsoft Push Notification Service (MPNS). Intended for cloud applications powered by Node.js.\r\n\r\n## Installation\r\n\r\nVia [npm][]:\r\n\r\n\t$ npm install mpns\r\n\t\r\nAs a submodule of your Git project\r\n\r\n\t$ git submodule add http://github.com/jeffwilcox/mpns.git mpns\r\n\t$ git submodule update --init\r\n\r\n## Usage\r\n### Load in the module\r\n\r\n```javascript\r\nvar mpns = require('mpns');\r\n```\r\n\r\n### Sending a toast\r\nTo send a toast, simply call the `sendToast` method on mpns.\r\n\r\n```javascript\r\nvar mpns = require('mpns');\r\nmpns.sendToast(pushUri, 'Bold Text', 'This is normal text');\r\n\r\n// Optional callback\r\nmpns.sendToast(pushUri, text1, text2, callback);\r\n```\r\n\r\nEach of the methods that send tile and toast notifications have two alternative parameter signatures:\r\n\r\n```\r\nsend*(pushUri, [options], [callback]) \r\nsend*(pushUri, string1, string2, ..., [callback])\r\n```\r\n\r\nThe ordering of the parameters in the non-object calling method assumes ordering as documented in the toast or tile-specific sections below.\r\n\r\nFor toasts, the properties and ordering for them:\r\n\r\n* `text1` the text of the toast, this first text will appear bold on the phone\r\n* `text2` additional toast text, will appear in the normal font. It does not wrap.\r\n* `param` optional URI parameter within your application specifying the XAML page to open within the app, along with any query string parameters for the page's context\r\n\r\n### Sending a live tile update\r\nTo send a tile update, call the `sendTile` method on mpns.\r\n\r\nIt is recommended that you use the options syntax for this call as it is possible for the live tile update to include just one component in the update, say the tile count, and not update other properties. To clear the value of a property, simply pass `null` as the value.\r\n\r\nThe option names or ordering for parameters is:\r\n\r\n* `backgroundImage` URI to the background image for the tile. Beware that the URI may be restricted to the whitelisted domain names that you provided in your application.\r\n* `count` the number to appear in the tile\r\n* `title` the title of the tile\r\n* `backBackgroundImage` URI to the image to be on the flip side of the tile\r\n* `backTitle` optional title for the back tile\r\n* `backContent` optional content for the back tile (appears in a larger font size)\r\n* `id` optional ID for a secodary tile\r\n\r\nSome devices support an enhanced tile format called a \"flip tile\", which supports some additional parameters. This kind of tile can be sent using the `sendFlipTile` method, which supports *all of the above* parameters as well as:\r\n* `smallBackgroundImage` URI to the background image for the tile when it is shrunk to small size\r\n* `wideBackgroundImage` URI to the background image for the tile when it is expanded to wide size\r\n* `wideBackContent` content for the back tile (appears in a larger font size) when the tile is expanded to wide size\r\n* `wideBackBackgroundImage` URI to the image to be on the flip side of the tile when the tile is expanded to wide size\r\n\r\n\r\n### Create a new notification object\r\nYou can create a new notification object (either of type live tile or toast). This is the original style for this module but it is now recommended that you use the shorter `send*` syntax on the mpns object itself. This aligns with the WNS module for Windows in its simplicity.\r\n\r\nProperty names for the notification object directly correlate to the names used in the MPNS XML payload as documented on MSDN. Properties can either be set directly on the object (such as toast.text1) or by passing the values in as options to the constructor.\r\n\r\n```javascript\r\noptions = { text1: 'Hello!', text2: 'Great to see you today.' };\r\nvar toast = new mpns.toast(options);\r\n```\r\n\r\n### Sending a raw notification\r\nWhen creating the notification object, either provide the raw payload first, or as the `options.payload` property.\r\n\r\n```javascript\r\nvar raw = new mpns.rawNotification('My Raw Payload', options);\r\n```\r\n\r\nToday the type on the request is set to UTF8 explicitly.\r\n\r\n### Using authenticated channels (MTLS)\r\nYou may use authenticated channels for the push notifications. Further information can be found here:http://msdn.microsoft.com/en-us/library/windowsphone/develop/ff941099(v=vs.105).aspx\r\n\r\nAuthenticated channels require a TLS client certificate for client authentication against the MPNS server.\r\nThe TLS certificate is registered in your Microsoft Phone Development Dashboard.\r\nThe CN of the certificate is used in the APP as Service Name in the HttpNotificationChannel constructor.\r\n\r\nTo use authentication you must provide the client certificate (including the private key) to the options of the send* functions.\r\nThe client certificate is used when the pushURI is a https URI.\r\n\r\nThe following options from tls.connect() can be specified:\r\n\r\n* `pfx` Certificate, Private key and CA certificates to use for SSL. Default null.\r\n* `key` Private key to use for SSL. Default null.\r\n* `passphrase`  A string of passphrase for the private key or pfx. Default null.\r\n* `cert` Public x509 certificate to use. Default null.\r\n* `ca` An authority certificate or array of authority certificates to check the remote host against.\r\n* `ciphers` A string describing the ciphers to use or exclude.\r\n* `rejectUnauthorized` If true, the server certificate is verified against the list of supplied CAs. An 'error' event is emitted if verification fails. Verification happens at the connection level, before the HTTP request is sent. Default true.\r\n\r\n```javascript\r\nvar options = { \r\n\ttext1: 'Hello!',\r\n\ttext2: 'Great to see you today.'\r\n\tcert: fs.readFileSync('mycert.pem'),\r\n\tkey: fs.readFileSync('mycertkey.pem')\r\n\t};\r\n\r\nmpns.sendToast(httpspushUri, options, callback);\r\n```\r\n\r\n### HTTP proxy support\r\n\r\nIf the options passed into a tile or push call include a `proxy` value, the proxy server information will be used. The string value should be the URI to the proxy, including host, for example: `{ proxy: 'http://yourproxy:8080'}`.\r\n\r\n### Results object information\r\nA results object is passed back through the callback and has important information from MPNS.\r\n\r\n- `deviceConnectionStatus`: The device status as reported by the service.\r\n- `notificationStatus`: The status of your provided notification.\r\n- `subscriptionStatus`: The status of the subscription URI.\r\n\r\nThe object will also contain all the key fields for your toast or live tile update, plus the pushType. This makes it easy to store this information in a history log somewhere in the ether.\r\n\r\n### Handling Errors\r\nIt is very important as a consumer that you store appropriate actionable data about failed push notification attempts. As a result, the callback's first parameter (err) is set to the standard results object as well as a few additional fields depending on the returned status code from the server.\r\n\r\nRemember to take action on that information in order to be a good MPNS citizen. These values may be set in the error object and of interest to you:\r\n\r\n- `minutesToDelay`: If this is present, it is the suggested minimum amount of time that you should wait until making another request to the same subscription URI. For HTTP 412s, for example, the minimum time is one hour and so the returned value defaults to 61.\r\n- `shouldDeleteChannel`: If this is set to `true`, the channel is gone according to MPNS. Delete it from your channel/subscription database and never look back.\r\n- `innerError`: If an error is captured while trying to make the HTTP request, this will be set to that error callback instance.\r\n\r\n### A note about different Windows Phone versions\r\nThis module permits sending toasts and tiles supported only on specific versions of Windows Phone. If you use those features on a version where they are unsupported, unfortunately notifications may not be received, or will error out the subscription.\r\n\r\nTake care when registering your subscription channels with your cloud service to include the application platform version of the app (7.1 for Mango apps). To rock, maybe also grab the OS version and deployed app version. That information can be helpful when supporting customers.\r\n\r\nHere is a list of features that are only supported in given versions of Windows Phone:\r\n* For Windows Phone 7.0\r\n\t* Do not use the `param` or other fields as indicated below and it should work OK.\r\n* Only supported in Windows Phone 7.5+ (Mango/WP 7.1 OS)\r\n    * Including the `param` field when sending a push\r\n    * Including the `id` parameter when sending a tile\r\n* Only supported in Windows Phone 7.8+ (including Windows Phone 8)\r\n    * Sending \"flip\" tiles\r\n\r\n## Credits\r\n\r\nNPM module written and maintained by [Jeff Wilcox] with contributions from:\r\n\r\n- Jeff Wilcox : https://github.com/jeffwilcox\r\n- Shawn Burke : https://github.com/shawnburke\r\n- Jeremie Pelletier : https://github.com/ddude\r\n- Yavor Georgiev: https://github.com/yavorg\r\n- Stephan Eckbauer: https://github.com/ste99\r\n\r\n## License\r\n\r\nCopyright Jeff Wilcox\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n[Jeff Wilcox]: http://www.jeff.wilcox.name\r\n[npm]: http://github.com/isaacs/npm\r\n\r\n## Changelog\r\n\r\n1.2.8:\r\n\r\n* Adds a fix for Node 0.10.10+ to properly consume response data via stream resume\r\n\r\n1.2.7:\r\n\r\n* Mild refactoring\r\n\r\n1.2.6:\r\n\r\n* Adds support for an HTTP proxy via `options.proxy` (thanks @tjunnone)\r\n\r\n1.2.5:\r\n\r\n* Adds support for TLS/HTTPS authenticated push channels\r\n\r\n1.2.4:\r\n\r\n* Fixes a small typo in smallBackgroundImage (thanks @rs)\r\n* Adds error handling when URLs cannot be resolved\r\n\r\n1.2.3:\r\n\r\n* Uses `url.parse` to support hostnames with ports \r\n\r\n1.2.2:\r\n\r\n* Allows clearing a property value for tiles\r\n\r\n1.2.1:\r\n\r\n* Renames `sendRawNotification` to `sendRaw`\r\n* Renames `error` parameter to `innerError`\r\n* Fixes issue #8 that `sendRaw` wasn't working\r\n\r\n1.2.0:\r\n\r\n* Adds support for `sendFlipTile` method to support the new kinds of tiles added in 7.8+ devices\r\n* Adds support for secondary tiles via the `id` parameter\r\n\r\n1.1.1:\r\n\r\n* Adds parameter validation that will throw, for robustness.\r\n\r\n1.1.0:\r\n\r\n* Adds `sendText` and `sendTile` methods more consistent with the WNS module, removing the need to create a new object, only to then call send on it with a push URI.\r\n\r\n1.0.4:\r\n\r\n* Adds support for Node.js through 0.9.0\r\n\r\n1.0.3:\r\n\r\n* Addresses issues when using numbers to set the tile data\r\n* Cleans up string encoding functions.\r\n\r\n1.0.2:\r\n\r\n* Fixes some small formatting issues.\r\n\r\n1.0.1:\r\n\r\n* Adds raw notification type support.\r\n\r\n1.0.0:\r\n\r\n* Initial implementation offering basic live tile and toast (no raw) support.\r\n","_id":"mpns@1.2.8","dist":{"shasum":"fcdfd1f05699c1699976ce5f27bc3de4ef30a2f6","tarball":"http://registry.npmjs.org/mpns/-/mpns-1.2.8.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"},"maintainers":[{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"}],"directories":{}},"2.0.0":{"name":"mpns","description":"A Node.js interface to the Microsoft Push Notification Service (MPNS) for Windows Phone.","version":"2.0.0","author":{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},"contributors":[{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},{"name":"Yavor Georgiev"}],"keywords":["mpns","notifications","wp","windows phone","microsoft","push","push notifications"],"repository":{"type":"git","url":"git://github.com/jeffwilcox/mpns.git"},"main":"./lib/mpns.js","engines":{"node":">= 0.5.0"},"scripts":{"test":"mocha -u tdd --reporter spec test/*.js"},"devDependencies":{"should":"*","mocha":"*"},"readme":"#mpns\r\n\r\n[![build status](https://secure.travis-ci.org/jeffwilcox/mpns.png)](http://travis-ci.org/jeffwilcox/mpns)\r\n\r\nSend toast and live tile updates to Windows Phones through the Microsoft Push Notification Service (MPNS). Intended for cloud applications powered by Node.js.\r\n\r\n## Installation\r\n\r\nVia [npm][]:\r\n\r\n\t$ npm install mpns\r\n\t\r\nAs a submodule of your Git project\r\n\r\n\t$ git submodule add http://github.com/jeffwilcox/mpns.git mpns\r\n\t$ git submodule update --init\r\n\r\n## Usage\r\n### Load in the module\r\n\r\n```javascript\r\nvar mpns = require('mpns');\r\n```\r\n\r\n### Sending a toast\r\nTo send a toast, simply call the `sendToast` method on mpns.\r\n\r\n```javascript\r\nvar mpns = require('mpns');\r\nmpns.sendToast(pushUri, 'Bold Text', 'This is normal text');\r\n\r\n// Optional callback\r\nmpns.sendToast(pushUri, text1, text2, callback);\r\n```\r\n\r\nEach of the methods that send tile and toast notifications have two alternative parameter signatures:\r\n\r\n```\r\nsend*(pushUri, [options], [callback]) \r\nsend*(pushUri, string1, string2, ..., [callback])\r\n```\r\n\r\nThe ordering of the parameters in the non-object calling method assumes ordering as documented in the toast or tile-specific sections below.\r\n\r\nFor toasts, the properties and ordering for them:\r\n\r\n* `text1` the text of the toast, this first text will appear bold on the phone\r\n* `text2` additional toast text, will appear in the normal font. It does not wrap.\r\n* `param` optional URI parameter within your application specifying the XAML page to open within the app, along with any query string parameters for the page's context\r\n\r\n### Sending a live tile update\r\nTo send a tile update, call the `sendTile` method on mpns.\r\n\r\nIt is recommended that you use the options syntax for this call as it is possible for the live tile update to include just one component in the update, say the tile count, and not update other properties. To clear the value of a property, simply pass `null` as the value.\r\n\r\nThe option names or ordering for parameters is:\r\n\r\n* `backgroundImage` URI to the background image for the tile. Beware that the URI may be restricted to the whitelisted domain names that you provided in your application.\r\n* `count` the number to appear in the tile\r\n* `title` the title of the tile\r\n* `backBackgroundImage` URI to the image to be on the flip side of the tile\r\n* `backTitle` optional title for the back tile\r\n* `backContent` optional content for the back tile (appears in a larger font size)\r\n* `id` optional ID for a secodary tile\r\n\r\nSome devices support an enhanced tile format called a \"flip tile\", which supports some additional parameters. This kind of tile can be sent using the `sendFlipTile` method, which supports *all of the above* parameters as well as:\r\n* `smallBackgroundImage` URI to the background image for the tile when it is shrunk to small size\r\n* `wideBackgroundImage` URI to the background image for the tile when it is expanded to wide size\r\n* `wideBackContent` content for the back tile (appears in a larger font size) when the tile is expanded to wide size\r\n* `wideBackBackgroundImage` URI to the image to be on the flip side of the tile when the tile is expanded to wide size\r\n\r\n\r\n### Create a new notification object\r\nYou can create a new notification object (either of type live tile or toast). This is the original style for this module but it is now recommended that you use the shorter `send*` syntax on the mpns object itself. This aligns with the WNS module for Windows in its simplicity.\r\n\r\nProperty names for the notification object directly correlate to the names used in the MPNS XML payload as documented on MSDN. Properties can either be set directly on the object (such as toast.text1) or by passing the values in as options to the constructor.\r\n\r\n```javascript\r\noptions = { text1: 'Hello!', text2: 'Great to see you today.' };\r\nvar toast = new mpns.toast(options);\r\n```\r\n\r\n### Sending a raw notification\r\nWhen creating the notification object, either provide the raw payload first, or as the `options.payload` property.\r\n\r\n```javascript\r\nvar raw = new mpns.rawNotification('My Raw Payload', options);\r\n```\r\n\r\nToday the type on the request is set to UTF8 explicitly.\r\n\r\n### Using authenticated channels (MTLS)\r\nYou may use authenticated channels for the push notifications. Further information can be found here:http://msdn.microsoft.com/en-us/library/windowsphone/develop/ff941099(v=vs.105).aspx\r\n\r\nAuthenticated channels require a TLS client certificate for client authentication against the MPNS server.\r\nThe TLS certificate is registered in your Microsoft Phone Development Dashboard.\r\nThe CN of the certificate is used in the APP as Service Name in the HttpNotificationChannel constructor.\r\n\r\nTo use authentication you must provide the client certificate (including the private key) to the options of the send* functions.\r\nThe client certificate is used when the pushURI is a https URI.\r\n\r\nThe following options from tls.connect() can be specified:\r\n\r\n* `pfx` Certificate, Private key and CA certificates to use for SSL. Default null.\r\n* `key` Private key to use for SSL. Default null.\r\n* `passphrase`  A string of passphrase for the private key or pfx. Default null.\r\n* `cert` Public x509 certificate to use. Default null.\r\n* `ca` An authority certificate or array of authority certificates to check the remote host against.\r\n* `ciphers` A string describing the ciphers to use or exclude.\r\n* `rejectUnauthorized` If true, the server certificate is verified against the list of supplied CAs. An 'error' event is emitted if verification fails. Verification happens at the connection level, before the HTTP request is sent. Default true.\r\n\r\n```javascript\r\nvar options = { \r\n\ttext1: 'Hello!',\r\n\ttext2: 'Great to see you today.'\r\n\tcert: fs.readFileSync('mycert.pem'),\r\n\tkey: fs.readFileSync('mycertkey.pem')\r\n\t};\r\n\r\nmpns.sendToast(httpspushUri, options, callback);\r\n```\r\n\r\n### HTTP proxy support\r\n\r\nIf the options passed into a tile or push call include a `proxy` value, the proxy server information will be used. The string value should be the URI to the proxy, including host, for example: `{ proxy: 'http://yourproxy:8080'}`.\r\n\r\n### Results object information\r\nA results object is passed back through the callback and has important information from MPNS.\r\n\r\n- `deviceConnectionStatus`: The device status as reported by the service.\r\n- `notificationStatus`: The status of your provided notification.\r\n- `subscriptionStatus`: The status of the subscription URI.\r\n\r\nThe object will also contain all the key fields for your toast or live tile update, plus the pushType. This makes it easy to store this information in a history log somewhere in the ether.\r\n\r\n### Handling Errors\r\nIt is very important as a consumer that you store appropriate actionable data about failed push notification attempts. As a result, the callback's first parameter (err) is set to the standard results object as well as a few additional fields depending on the returned status code from the server.\r\n\r\nRemember to take action on that information in order to be a good MPNS citizen. These values may be set in the error object and of interest to you:\r\n\r\n- `minutesToDelay`: If this is present, it is the suggested minimum amount of time that you should wait until making another request to the same subscription URI. For HTTP 412s, for example, the minimum time is one hour and so the returned value defaults to 61.\r\n- `shouldDeleteChannel`: If this is set to `true`, the channel is gone according to MPNS. Delete it from your channel/subscription database and never look back.\r\n- `innerError`: If an error is captured while trying to make the HTTP request, this will be set to that error callback instance.\r\n\r\n### A note about different Windows Phone versions\r\nThis module permits sending toasts and tiles supported only on specific versions of Windows Phone. If you use those features on a version where they are unsupported, unfortunately notifications may not be received, or will error out the subscription.\r\n\r\nTake care when registering your subscription channels with your cloud service to include the application platform version of the app (7.1 for Mango apps). To rock, maybe also grab the OS version and deployed app version. That information can be helpful when supporting customers.\r\n\r\nHere is a list of features that are only supported in given versions of Windows Phone:\r\n* For Windows Phone 7.0\r\n\t* Do not use the `param` or other fields as indicated below and it should work OK.\r\n* Only supported in Windows Phone 7.5+ (Mango/WP 7.1 OS)\r\n    * Including the `param` field when sending a push\r\n    * Including the `id` parameter when sending a tile\r\n* Only supported in Windows Phone 7.8+ (including Windows Phone 8)\r\n    * Sending \"flip\" tiles\r\n\r\n## Credits\r\n\r\nNPM module written and maintained by [Jeff Wilcox] with contributions from:\r\n\r\n- Jeff Wilcox : https://github.com/jeffwilcox\r\n- Shawn Burke : https://github.com/shawnburke\r\n- Jeremie Pelletier : https://github.com/ddude\r\n- Yavor Georgiev: https://github.com/yavorg\r\n- Stephan Eckbauer: https://github.com/ste99\r\n\r\n## License\r\n\r\nCopyright Jeff Wilcox\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n[Jeff Wilcox]: http://www.jeff.wilcox.name\r\n[npm]: http://github.com/isaacs/npm\r\n\r\n## Changelog\r\n\r\nThe changelog has moved over time.\r\n\r\n* 1.2.8 and newer: The GitHub releases feature provides this information at https://github.com/jeffwilcox/mpns/releases\r\n* 0-1.2.8: Available in the [CHANGELOG.md](https://github.com/jeffwilcox/mpns/blob/master/CHANGELOG.md) markdown file\r\n\r\n","_id":"mpns@2.0.0","dist":{"shasum":"14b10ce95d06beb8092c1e2a3363ffefe2c62b70","tarball":"http://registry.npmjs.org/mpns/-/mpns-2.0.0.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"},"maintainers":[{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"}],"directories":{}},"2.0.1":{"name":"mpns","description":"A Node.js interface to the Microsoft Push Notification Service (MPNS) for Windows Phone.","version":"2.0.1","author":{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},"contributors":[{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},{"name":"Yavor Georgiev"}],"keywords":["mpns","notifications","wp","windows phone","microsoft","push","push notifications"],"repository":{"type":"git","url":"git://github.com/jeffwilcox/mpns.git"},"main":"./lib/mpns.js","engines":{"node":">= 0.5.0"},"scripts":{"test":"mocha -u tdd --reporter spec test/*.js"},"devDependencies":{"should":"*","mocha":"*"},"readme":"#mpns\r\n\r\n[![build status](https://secure.travis-ci.org/jeffwilcox/mpns.png)](http://travis-ci.org/jeffwilcox/mpns)\r\n\r\nSend toast and live tile updates to Windows Phones through the Microsoft Push Notification Service (MPNS). Intended for cloud applications powered by Node.js.\r\n\r\n## Installation\r\n\r\nVia [npm][]:\r\n\r\n\t$ npm install mpns\r\n\t\r\nAs a submodule of your Git project\r\n\r\n\t$ git submodule add http://github.com/jeffwilcox/mpns.git mpns\r\n\t$ git submodule update --init\r\n\r\n## Usage\r\n### Load in the module\r\n\r\n```javascript\r\nvar mpns = require('mpns');\r\n```\r\n\r\n### Sending a toast\r\nTo send a toast, simply call the `sendToast` method on mpns.\r\n\r\n```javascript\r\nvar mpns = require('mpns');\r\nmpns.sendToast(pushUri, 'Bold Text', 'This is normal text');\r\n\r\n// Optional callback\r\nmpns.sendToast(pushUri, text1, text2, callback);\r\n```\r\n\r\nEach of the methods that send tile and toast notifications have two alternative parameter signatures:\r\n\r\n```\r\nsend*(pushUri, [options], [callback]) \r\nsend*(pushUri, string1, string2, ..., [callback])\r\n```\r\n\r\nThe ordering of the parameters in the non-object calling method assumes ordering as documented in the toast or tile-specific sections below.\r\n\r\nFor toasts, the properties and ordering for them:\r\n\r\n* `text1` the text of the toast, this first text will appear bold on the phone\r\n* `text2` additional toast text, will appear in the normal font. It does not wrap.\r\n* `param` optional URI parameter within your application specifying the XAML page to open within the app, along with any query string parameters for the page's context\r\n\r\n### Sending a live tile update\r\nTo send a tile update, call the `sendTile` method on mpns.\r\n\r\nIt is recommended that you use the options syntax for this call as it is possible for the live tile update to include just one component in the update, say the tile count, and not update other properties. To clear the value of a property, simply pass `null` as the value.\r\n\r\nThe option names or ordering for parameters is:\r\n\r\n* `backgroundImage` URI to the background image for the tile. Beware that the URI may be restricted to the whitelisted domain names that you provided in your application.\r\n* `count` the number to appear in the tile\r\n* `title` the title of the tile\r\n* `backBackgroundImage` URI to the image to be on the flip side of the tile\r\n* `backTitle` optional title for the back tile\r\n* `backContent` optional content for the back tile (appears in a larger font size)\r\n* `id` optional ID for a secodary tile\r\n\r\nSome devices support an enhanced tile format called a \"flip tile\", which supports some additional parameters. This kind of tile can be sent using the `sendFlipTile` method, which supports *all of the above* parameters as well as:\r\n* `smallBackgroundImage` URI to the background image for the tile when it is shrunk to small size\r\n* `wideBackgroundImage` URI to the background image for the tile when it is expanded to wide size\r\n* `wideBackContent` content for the back tile (appears in a larger font size) when the tile is expanded to wide size\r\n* `wideBackBackgroundImage` URI to the image to be on the flip side of the tile when the tile is expanded to wide size\r\n\r\n### Sending a raw notification\r\nWhen creating the notification object, either provide the raw payload first, or as the `options.payload` property.\r\n\r\n```javascript\r\nvar raw = new mpns.rawNotification('My Raw Payload', options);\r\n```\r\n\r\nToday the type on the request is set to UTF8 explicitly.\r\n\r\n### Using authenticated channels (MTLS)\r\nYou may use authenticated channels for the push notifications. Further information can be found here:http://msdn.microsoft.com/en-us/library/windowsphone/develop/ff941099(v=vs.105).aspx\r\n\r\nAuthenticated channels require a TLS client certificate for client authentication against the MPNS server.\r\nThe TLS certificate is registered in your Microsoft Phone Development Dashboard.\r\nThe CN of the certificate is used in the APP as Service Name in the HttpNotificationChannel constructor.\r\n\r\nTo use authentication you must provide the client certificate (including the private key) to the options of the send* functions.\r\nThe client certificate is used when the pushURI is a https URI.\r\n\r\nThe following options from tls.connect() can be specified:\r\n\r\n* `pfx` Certificate, Private key and CA certificates to use for SSL. Default null.\r\n* `key` Private key to use for SSL. Default null.\r\n* `passphrase`  A string of passphrase for the private key or pfx. Default null.\r\n* `cert` Public x509 certificate to use. Default null.\r\n* `ca` An authority certificate or array of authority certificates to check the remote host against.\r\n* `ciphers` A string describing the ciphers to use or exclude.\r\n* `rejectUnauthorized` If true, the server certificate is verified against the list of supplied CAs. An 'error' event is emitted if verification fails. Verification happens at the connection level, before the HTTP request is sent. Default true.\r\n\r\n```javascript\r\nvar options = { \r\n\ttext1: 'Hello!',\r\n\ttext2: 'Great to see you today.'\r\n\tcert: fs.readFileSync('mycert.pem'),\r\n\tkey: fs.readFileSync('mycertkey.pem')\r\n\t};\r\n\r\nmpns.sendToast(httpspushUri, options, callback);\r\n```\r\n\r\n### HTTP proxy support\r\n\r\nIf the options passed into a tile or push call include a `proxy` value, the proxy server information will be used. The string value should be the URI to the proxy, including host, for example: `{ proxy: 'http://yourproxy:8080'}`.\r\n\r\n### Results object information\r\nA results object is passed back through the callback and has important information from MPNS.\r\n\r\n- `deviceConnectionStatus`: The device status as reported by the service.\r\n- `notificationStatus`: The status of your provided notification.\r\n- `subscriptionStatus`: The status of the subscription URI.\r\n\r\nThe object will also contain all the key fields for your toast or live tile update, plus the pushType. This makes it easy to store this information in a history log somewhere in the ether.\r\n\r\n### Handling Errors\r\nIt is very important as a consumer that you store appropriate actionable data about failed push notification attempts. As a result, the callback's first parameter (err) is set to the standard results object as well as a few additional fields depending on the returned status code from the server.\r\n\r\nRemember to take action on that information in order to be a good MPNS citizen. These values may be set in the error object and of interest to you:\r\n\r\n- `minutesToDelay`: If this is present, it is the suggested minimum amount of time that you should wait until making another request to the same subscription URI. For HTTP 412s, for example, the minimum time is one hour and so the returned value defaults to 61.\r\n- `shouldDeleteChannel`: If this is set to `true`, the channel is gone according to MPNS. Delete it from your channel/subscription database and never look back.\r\n- `innerError`: If an error is captured while trying to make the HTTP request, this will be set to that error callback instance.\r\n\r\n### A note about different Windows Phone versions\r\nThis module permits sending toasts and tiles supported only on specific versions of Windows Phone. If you use those features on a version where they are unsupported, unfortunately notifications may not be received, or will error out the subscription.\r\n\r\nTake care when registering your subscription channels with your cloud service to include the application platform version of the app (7.1 for Mango apps). To rock, maybe also grab the OS version and deployed app version. That information can be helpful when supporting customers.\r\n\r\nHere is a list of features that are only supported in given versions of Windows Phone:\r\n* For Windows Phone 7.0\r\n\t* Do not use the `param` or other fields as indicated below and it should work OK.\r\n* Only supported in Windows Phone 7.5+ (Mango/WP 7.1 OS)\r\n    * Including the `param` field when sending a push\r\n    * Including the `id` parameter when sending a tile\r\n* Only supported in Windows Phone 7.8+ (including Windows Phone 8)\r\n    * Sending \"flip\" tiles\r\n\r\n## Credits\r\n\r\nNPM module written and maintained by [Jeff Wilcox] with contributions from:\r\n\r\n- Jeff Wilcox : https://github.com/jeffwilcox\r\n- Shawn Burke : https://github.com/shawnburke\r\n- Jeremie Pelletier : https://github.com/ddude\r\n- Yavor Georgiev: https://github.com/yavorg\r\n- Stephan Eckbauer: https://github.com/ste99\r\n\r\n## License\r\n\r\nCopyright Jeff Wilcox\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n[Jeff Wilcox]: http://www.jeff.wilcox.name\r\n[npm]: http://github.com/isaacs/npm\r\n\r\n## Changelog\r\n\r\nThe changelog has moved over time.\r\n\r\n* 1.2.8 and newer: The GitHub releases feature provides this information at https://github.com/jeffwilcox/mpns/releases\r\n* 0-1.2.8: Available in the [CHANGELOG.md](https://github.com/jeffwilcox/mpns/blob/master/CHANGELOG.md) markdown file\r\n\r\n","_id":"mpns@2.0.1","dist":{"shasum":"24d269faed8f39726ed31e6250653d043fd44e16","tarball":"http://registry.npmjs.org/mpns/-/mpns-2.0.1.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"},"maintainers":[{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"}],"directories":{}},"2.1.0":{"name":"mpns","description":"A Node.js interface to the Microsoft Push Notification Service (MPNS) for Windows Phone.","version":"2.1.0","author":{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},"contributors":[{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},{"name":"Yavor Georgiev"}],"keywords":["mpns","notifications","wp","windows phone","microsoft","push","push notifications"],"repository":{"type":"git","url":"git://github.com/jeffwilcox/mpns.git"},"main":"./lib/mpns.js","engines":{"node":">= 0.5.0"},"scripts":{"test":"mocha -u tdd --reporter spec test/*.js"},"devDependencies":{"should":"*","mocha":"*"},"readme":"#mpns\n\n[![build status](https://secure.travis-ci.org/jeffwilcox/mpns.png)](http://travis-ci.org/jeffwilcox/mpns)\n\nSend toast and live tile updates to Windows Phones through the Microsoft Push Notification Service (MPNS). Intended for cloud applications powered by Node.js.\n\n## Installation\n\nVia [npm][]:\n\n\t$ npm install mpns\n\t\nAs a submodule of your Git project\n\n\t$ git submodule add http://github.com/jeffwilcox/mpns.git mpns\n\t$ git submodule update --init\n\n## Usage\n### Load in the module\n\n```javascript\nvar mpns = require('mpns');\n```\n\n### Sending a toast\nTo send a toast, simply call the `sendToast` method on mpns.\n\n```javascript\nvar mpns = require('mpns');\nmpns.sendToast(pushUri, 'Bold Text', 'This is normal text');\n\n// Optional callback\nmpns.sendToast(pushUri, text1, text2, callback);\n```\n\nEach of the methods that send tile and toast notifications have two alternative parameter signatures:\n\n```\nsend*(pushUri, [options], [callback]) \nsend*(pushUri, string1, string2, ..., [callback])\n```\n\nThe ordering of the parameters in the non-object calling method assumes ordering as documented in the toast or tile-specific sections below.\n\nFor toasts, the properties and ordering for them:\n\n* `text1` the text of the toast, this first text will appear bold on the phone\n* `text2` additional toast text, will appear in the normal font. It does not wrap.\n* `param` optional URI parameter within your application specifying the XAML page to open within the app, along with any query string parameters for the page's context\n\n### Sending a live tile update\nTo send a tile update, call the `sendTile` method on mpns.\n\nIt is recommended that you use the options syntax for this call as it is possible for the live tile update to include just one component in the update, say the tile count, and not update other properties. To clear the value of a property, simply pass `null` as the value.\n\nThe option names or ordering for parameters is:\n\n* `backgroundImage` URI to the background image for the tile. Beware that the URI may be restricted to the whitelisted domain names that you provided in your application.\n* `count` the number to appear in the tile\n* `title` the title of the tile\n* `backBackgroundImage` URI to the image to be on the flip side of the tile\n* `backTitle` optional title for the back tile\n* `backContent` optional content for the back tile (appears in a larger font size)\n* `id` optional ID for a secodary tile\n\nSome devices support an enhanced tile format called a \"flip tile\", which supports some additional parameters. This kind of tile can be sent using the `sendFlipTile` method, which supports *all of the above* parameters as well as:\n* `smallBackgroundImage` URI to the background image for the tile when it is shrunk to small size\n* `wideBackgroundImage` URI to the background image for the tile when it is expanded to wide size\n* `wideBackContent` content for the back tile (appears in a larger font size) when the tile is expanded to wide size\n* `wideBackBackgroundImage` URI to the image to be on the flip side of the tile when the tile is expanded to wide size\n\nAnother format is called \"iconic tile\". This can be sent using `sendIconicTile` method with the following parameters:\n* `backgroundColor` hexadecimal color code in format ARGB\n* `count` the number that apper on the right of an icon\n* `title` the title of the tile\n* `iconImage` URI of the normal icon\n* `smallIconImage` URI of the icon for small tile\n* `wideContent1` top line of text shown in a wide tile\n* `wideContent2` second line of text\n* `wideContent3` third line of text\n\n### Sending a raw notification\nWhen creating the notification object, either provide the raw payload first, or as the `options.payload` property.\n\n```javascript\nvar raw = new mpns.rawNotification('My Raw Payload', options);\n```\n\nToday the type on the request is set to UTF8 explicitly.\n\n### Using authenticated channels (MTLS)\nYou may use authenticated channels for the push notifications. Further information can be found here:http://msdn.microsoft.com/en-us/library/windowsphone/develop/ff941099(v=vs.105).aspx\n\nAuthenticated channels require a TLS client certificate for client authentication against the MPNS server.\nThe TLS certificate is registered in your Microsoft Phone Development Dashboard.\nThe CN of the certificate is used in the APP as Service Name in the HttpNotificationChannel constructor.\n\nTo use authentication you must provide the client certificate (including the private key) to the options of the send* functions.\nThe client certificate is used when the pushURI is a https URI.\n\nThe following options from tls.connect() can be specified:\n\n* `pfx` Certificate, Private key and CA certificates to use for SSL. Default null.\n* `key` Private key to use for SSL. Default null.\n* `passphrase`  A string of passphrase for the private key or pfx. Default null.\n* `cert` Public x509 certificate to use. Default null.\n* `ca` An authority certificate or array of authority certificates to check the remote host against.\n* `ciphers` A string describing the ciphers to use or exclude.\n* `rejectUnauthorized` If true, the server certificate is verified against the list of supplied CAs. An 'error' event is emitted if verification fails. Verification happens at the connection level, before the HTTP request is sent. Default true.\n\n```javascript\nvar options = { \n\ttext1: 'Hello!',\n\ttext2: 'Great to see you today.'\n\tcert: fs.readFileSync('mycert.pem'),\n\tkey: fs.readFileSync('mycertkey.pem')\n\t};\n\nmpns.sendToast(httpspushUri, options, callback);\n```\n\n### HTTP proxy support\n\nIf the options passed into a tile or push call include a `proxy` value, the proxy server information will be used. The string value should be the URI to the proxy, including host, for example: `{ proxy: 'http://yourproxy:8080'}`.\n\n### Results object information\nA results object is passed back through the callback and has important information from MPNS.\n\n- `deviceConnectionStatus`: The device status as reported by the service.\n- `notificationStatus`: The status of your provided notification.\n- `subscriptionStatus`: The status of the subscription URI.\n\nThe object will also contain all the key fields for your toast or live tile update, plus the pushType. This makes it easy to store this information in a history log somewhere in the ether.\n\n### Handling Errors\nIt is very important as a consumer that you store appropriate actionable data about failed push notification attempts. As a result, the callback's first parameter (err) is set to the standard results object as well as a few additional fields depending on the returned status code from the server.\n\nRemember to take action on that information in order to be a good MPNS citizen. These values may be set in the error object and of interest to you:\n\n- `minutesToDelay`: If this is present, it is the suggested minimum amount of time that you should wait until making another request to the same subscription URI. For HTTP 412s, for example, the minimum time is one hour and so the returned value defaults to 61.\n- `shouldDeleteChannel`: If this is set to `true`, the channel is gone according to MPNS. Delete it from your channel/subscription database and never look back.\n- `innerError`: If an error is captured while trying to make the HTTP request, this will be set to that error callback instance.\n\n### A note about different Windows Phone versions\nThis module permits sending toasts and tiles supported only on specific versions of Windows Phone. If you use those features on a version where they are unsupported, unfortunately notifications may not be received, or will error out the subscription.\n\nTake care when registering your subscription channels with your cloud service to include the application platform version of the app (7.1 for Mango apps). To rock, maybe also grab the OS version and deployed app version. That information can be helpful when supporting customers.\n\nHere is a list of features that are only supported in given versions of Windows Phone:\n* For Windows Phone 7.0\n\t* Do not use the `param` or other fields as indicated below and it should work OK.\n* Only supported in Windows Phone 7.5+ (Mango/WP 7.1 OS)\n    * Including the `param` field when sending a push\n    * Including the `id` parameter when sending a tile\n* Only supported in Windows Phone 7.8+ (including Windows Phone 8)\n    * Sending \"flip\" tiles\n\n## Credits\n\nNPM module written and maintained by [Jeff Wilcox] with contributions from:\n\n- Jeff Wilcox : https://github.com/jeffwilcox\n- Shawn Burke : https://github.com/shawnburke\n- Jeremie Pelletier : https://github.com/ddude\n- Yavor Georgiev: https://github.com/yavorg\n- Stephan Eckbauer: https://github.com/ste99\n\n## License\n\nCopyright Jeff Wilcox\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n[Jeff Wilcox]: http://www.jeff.wilcox.name\n[npm]: http://github.com/isaacs/npm\n\n## Changelog\n\nThe changelog has moved over time.\n\n* 1.2.8 and newer: The GitHub releases feature provides this information at https://github.com/jeffwilcox/mpns/releases\n* 0-1.2.8: Available in the [CHANGELOG.md](https://github.com/jeffwilcox/mpns/blob/master/CHANGELOG.md) markdown file\n\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/jeffwilcox/mpns/issues"},"_id":"mpns@2.1.0","dist":{"shasum":"c0b973d172655730eab22e113f9939165a686779","tarball":"http://registry.npmjs.org/mpns/-/mpns-2.1.0.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"},"maintainers":[{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"}],"directories":{}}},"readme":"#mpns\r\n\r\nSend toast and live tile updates to Windows Phones through the Microsoft Push Notification Service (MPNS). Intended for the cloud and Node.js.\r\n\r\nThis is one of my very first Node.js projects so feedback and patience appreciated. I hope it helps!\r\n\r\n## Installation\r\n\r\nAs a submodule of your Git project\r\n\r\n\t$ git submodule add http://github.com/jeffwilcox/mpns.git mpns\r\n\t$ git submodule update --init\r\n\r\n## Usage\r\n### Load in the module\r\n\r\n\tvar mpns = require('mpns');\r\n\r\n### Create a new notification\r\nYou can create a new notification object (either of type live tile or toast). Raw notifications are not yet supported.\r\n\r\nProperty names for the notification object directly correlate to the names used in the MPNS XML payload as documented on MSDN. Properties can either be set directly on the object (such as toast.text1) or by passing the values in as options to the constructor.\r\n\r\n\toptions =   { text1: 'Hello!'\r\n\t\t\t\t, text2: 'Great to see you today.'\r\n\t\t\t\t};\r\n\r\n\tvar toast = new mpns.toast(options);\r\n\r\n### Sending a notification\r\nTo send a notification simply call the `send` method on the object. The first parameter is the HTTP URI to the MPNS endpoint of the client you'd like to send the notification to. You may provide an optional callback function as well.\r\n\r\n\ttoast.send('http://sn1.notify.live.net/throttledthirdparty/01.00/YOUR_ENDPOINT_HERE');\r\n\r\nYou can also use the other syntax. Let's send a live tile update!\r\n\r\n\tvar toast = new mpns.liveTile();\r\n\ttoast.title: 'My App';\r\n\ttoast.backgroundUri: 'http://sample.com/image.png';\r\n\ttoast.send('http://sn1.notify.live.net/throttledthirdparty/01.00/YOUR_ENDPOINT_HERE', function(err,res) {\r\n\t\tif (err) console.dir(err);\r\n\t\telse console.dir(res);\r\n\t});\r\n\r\n### Results object information\r\nA results object is passed back through the callback and has important information from MPNS.\r\n\r\n- `deviceConnectionStatus`: The device status as reported by the service.\r\n- `notificationStatus`: The status of your provided notification.\r\n- `subscriptionStatus`: The status of the subscription URI.\r\n\r\nThe object will also contain all the key fields for your toast or live tile update, plus the pushType. This makes it easy to store this information in a history log somewhere in the ether.\r\n\r\n### Handling Errors\r\nIt is very important as a consumer that you store appropriate actionable data about failed push notification attempts. As a result, the callback's first parameter (err) is set to the standard results object as well as a few additional fields depending on the returned status code from the server.\r\n\r\nRemember to take action on that information in order to be a good MPNS citizen. These values may be set in the error object and of interest to you:\r\n\r\n- `minutesToDelay`: If this is present, it is the suggested minimum amount of time that you should wait until making another request to the same subscription URI. For HTTP 412s, for example, the minimum time is one hour and so the returned value defaults to 61.\r\n- `shouldDeleteChannel`: If this is set to `true`, the channel is gone according to MPNS. Delete it from your channel/subscription database and never look back.\r\n- `error`: If an error is captured while trying to make the HTTP request, this will be set to that error callback instance.\r\n\r\n### A note about Windows Phone 7.5\r\nThis module permits sending toasts and tiles specific to Mango. If you include the `param` field when sending a push to a 7.0 (first Windows Phone release) phone, unfortunately it may not be received, or will error out the subscription.\r\n\r\nTake care when registering your subscription channels with your cloud service to include the application platform version of the app (7.1 for Mango apps). To rock, maybe also grab the OS version and deployed app version. That information can be helpful when supporting customers.\r\n\r\n## Credits\r\n\r\nWritten and maintained by [Jeff Wilcox].\r\n\r\n## License\r\n\r\nCopyright 2011 Jeff Wilcox\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n   http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n[Jeff Wilcox]: http://www.jeff.wilcox.name\r\n[npm]: http://github.com/isaacs/npm\r\n\r\n## Changelog\r\n\r\n1.0.0:\r\n\r\n* Initial implementation offering basic live tile and toast (no raw) support.\r\n","maintainers":[{"name":"jeffwilcox","email":"jeffwilcox@gmail.com"}],"time":{"modified":"2013-11-12T03:41:52.494Z","created":"2011-12-08T07:24:03.678Z","1.0.0":"2011-12-08T07:24:04.828Z","1.0.1":"2012-05-01T19:46:10.517Z","1.0.2":"2012-05-01T19:47:42.990Z","1.0.4":"2012-07-10T22:42:37.921Z","1.1.0":"2012-10-03T20:31:58.380Z","1.1.1":"2012-10-04T19:55:52.545Z","1.1.2":"2012-10-05T18:00:52.027Z","1.2.3":"2013-05-07T19:28:21.950Z","1.2.4":"2013-05-07T19:36:02.038Z","1.2.5":"2013-05-22T22:05:18.747Z","1.2.6":"2013-05-22T22:14:41.479Z","1.2.7":"2013-05-23T18:10:47.741Z","1.2.8":"2013-07-02T20:03:00.251Z","2.0.0":"2013-07-12T17:58:23.307Z","2.0.1":"2013-08-06T19:22:53.423Z","2.1.0":"2013-11-12T03:41:52.494Z"},"author":{"name":"Jeff Wilcox","email":"jeffwilcox+github@gmail.com"},"repository":{"type":"git","url":"git://github.com/jeffwilcox/mpns.git"},"users":{"ajduke":true,"igorissen":true},"_attachments":{},"_etag":"\"6IVS1TVTLCS4JYR4CMX9CCVVR\""}